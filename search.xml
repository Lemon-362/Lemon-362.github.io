<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode热题Hot（3）</title>
    <url>/2020/ckbj29rdq0000csvfhgjbbq6u/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="LeetCode热题Hot-（3）"><a href="#LeetCode热题Hot-（3）" class="headerlink" title="LeetCode热题Hot （3）"></a>LeetCode热题Hot （3）</h2><h4 id="无重复字符的最长子串："><a href="#无重复字符的最长子串：" class="headerlink" title="无重复字符的最长子串："></a>无重复字符的最长子串：</h4><ul>
<li>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度</li>
</ul>
<h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><ul>
<li>找以每个字符开头的最长无重复子串，那么答案一定在其中</li>
</ul>
<ol>
<li>用start遍历每一个字符，找以start位置开头的最长无重复子串</li>
<li>在每次遍历中，用end往后遍历，直到set中出现了重复字符时停止<br>  此时，start - end（不包括end） 就是以start位置开头的最长无重复子串</li>
<li>可以保证start+1 - end 是一定不会重复的，所以可以继续从end往后找<br>  将start位置从set中移除，start到下一个位置<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">longestSubString</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">       HashSet&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">       <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> end = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (start &lt; s.length())&#123;</span><br><span class="line">           <span class="keyword">while</span> (end &lt; s.length() &amp;&amp; !set.contains(s.charAt(end)))&#123;</span><br><span class="line">               set.add(s.charAt(end));</span><br><span class="line">               end++;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           len = Math.max(len, end - start);</span><br><span class="line"></span><br><span class="line">           set.remove(s.charAt(start));</span><br><span class="line">           start++;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> len;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>LeetCode热题Hot100</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode热题Hot（2）</title>
    <url>/2020/ckbj29re00002csvf230ect0s/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="LeetCode热题Hot-（2）"><a href="#LeetCode热题Hot-（2）" class="headerlink" title="LeetCode热题Hot （2）"></a>LeetCode热题Hot （2）</h2><h4 id="两数以链表的形式相加："><a href="#两数以链表的形式相加：" class="headerlink" title="两数以链表的形式相加："></a>两数以链表的形式相加：</h4><ul>
<li><p>给出两个 非空 的链表用来表示两个非负的整数。</p>
</li>
<li><p>其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字</p>
</li>
<li><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和</p>
</li>
<li><p>例如：</p>
<pre><code>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6)
输出：7 -&gt; 0 -&gt; 4
原因：342 + 65 = 407</code></pre></li>
</ul>
<h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><ul>
<li>模拟加法的过程，用一个全局变量carry保存之前一次的进位结果</li>
<li>TODO 注意：</li>
<li><ol>
<li>两个链表可能不是等长的</li>
</ol>
</li>
<li><ol start="2">
<li>可能最后一次加上后需要进位，那么需要在全部计算完后将进位1也连上去</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> val;</span><br><span class="line">       ListNode next;</span><br><span class="line"></span><br><span class="line">       ListNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">           val = x;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       ListNode p1 = l1;</span><br><span class="line">       ListNode p2 = l2;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">       ListNode newHead = <span class="keyword">new</span> ListNode(Integer.MIN_VALUE);</span><br><span class="line">       ListNode pre = newHead;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (p1 != <span class="keyword">null</span> || p2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">if</span> (p1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">               sum += p1.val;</span><br><span class="line">               p1 = p1.next;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (p2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">               sum += p2.val;</span><br><span class="line">               p2 = p2.next;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           sum += carry;</span><br><span class="line"></span><br><span class="line">           carry = sum / <span class="number">10</span>;</span><br><span class="line">           sum = sum % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">           pre.next = <span class="keyword">new</span> ListNode(sum);</span><br><span class="line">           pre = pre.next;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (carry == <span class="number">1</span>) &#123;</span><br><span class="line">           pre.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       ListNode res = newHead.next;</span><br><span class="line">       newHead.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LeetCode热题Hot100</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis参数处理</title>
    <url>/2020/ckbj29re70006csvf2m4y8y7e/</url>
    <content><![CDATA[<a id="more"></a>

<p>一、单个参数：mybatis不会做特殊处理 —— 参数名可以定义任意名称<br>    #{参数名}：取出参数</p>
<p>二、多个参数：mybatis会做特殊处理<br>     当我们设置成：<br>    （1）方法：<code>public Employee getEmpByIdAndLastName(Integer id, String lastName);</code><br>    （2）sql语句：<code>where id=#{id} and last_name=#{lastName}</code><br>    会报错异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.apache.ibatis.binding.BindingException: Parameter <span class="string">'id'</span> not found.</span><br><span class="line">Available parameters are [<span class="number">0</span>, <span class="number">1</span>, param1, param2]</span><br></pre></td></tr></table></figure>

<p>==解决办法一：==<br>        多个参数会被封装成一个map：<br>        （1）key：param1,…,paramN，或者参数的索引（从0开始）<br>        （2）value：传入的参数值<br>        #{param1}就是从mao中获取指定key的值<br>    sql语句：where id=#{param1} and last_name=#{param2}</p>
<p>==解决办法二：推荐！！！==<br><strong>命名参数</strong>：明确指定封装参数时map的key名称 —— <code>@Param(&quot;id&quot;)</code><br>    方法：<code>getEmpByIdAndLastName(@Param(&quot;id&quot;) Integer id, @Param(&quot;lastName&quot;) String lastName);</code><br>    sql语句：<code>where id=#{id} and last_name=#{lastName}</code><br>    多个参数会被封装成一个map：<br>            （1）key：使用@Param注解指定的值<br>            （2）value：传入的参数值<br>        #{指定的key}就是从mao中获取指定key的值</p>
<p>POJO：<br>三、如果多个参数正好是业务逻辑的数据模型，我们就可以直接传入pojo<br>    <code>#{属性名}</code>：取出传入的pojo的属性值</p>
<p>Map：<br>四、如果多个参数不是业务逻辑的数据模型，没有对应的pojo<br>    ==不经常使用时，我们可以一传入map==<br>    <code>#{key}</code>：取出map中对应的值</p>
<p>TO：<br>五、如果多个参数不是业务逻辑的数据模型，没有对应的pojo<br>    ==经常要使用，推荐编写一个TO(Transfer Object）数据传输对象==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&#123;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>六、<code>#{ }</code>和<code>${ }</code>：都可以获取map中的值或者pojo对象属性的值</p>
<p>1.区别：<br>（1）<code>#{ }</code>：以预编译的形式，将参数设置到sql语句中 PreparedStatement ==&gt; 可以防止sql注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">select * from tbl_employee where id=#&#123;id&#125; and last_name=#&#123;lastName&#125;</span><br><span class="line">Preparing: select * from tbl_employee where id=? and last_name=?</span><br></pre></td></tr></table></figure>

<p>（2）<code>${ }</code>：取出的值直接拼接在sql语句中 ⇒ 有sql注入安全问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">select * from tbl_employee where id=$&#123;id&#125; and last_name=#&#123;lastName&#125;</span><br><span class="line">Preparing: select * from tbl_employee where id=<span class="number">2</span> and last_name=?</span><br></pre></td></tr></table></figure>

<p>==大多是情况下，取参数的值都使用 <code>#{ }</code>==</p>
<pre><code>原生JDBC不支持占位符的地方我们就可以使用 ${} 进行取值
例如：
（1）表名不支持占位符，而现在可以使用 ${} 进行拼接
分表（按照年份分表拆分）：select * from ${year}_salary where ...; =&gt; 2017_salary, 2016_salary...
（2）order by后面的表达式不支持占位符，而现在可以使用 ${} 进行拼接
排序：select * from tnl_employee order by ${f_name} ${order}; ==&gt; 表达式 + desc/aesc</code></pre><p>2.<code>#{ }</code>更丰富的用法 —— 规定参数的一些规则<br>    javaType、 jdbcType、 mode（存储过程）、 numericScale、<br>    resultMap、 typeHandler、 jdbcTypeName、 expression（未来准备支持的功能）；</p>
<p>jdbcType通常需要在某种特定的条件下被设置：<br>    在数据为null时，有些数据库不能识别mybatis对null的默认处理（Oracle），此时会报错</p>
<pre><code>JdbcType OTHER：无效的类型；因为mybatis对所有的null都映射的是原生Jdbc的OTHER类型，oracle不能正确处理;
由于全局配置中：jdbcTypeForNull=OTHER；oracle不支持；两种办法
    1、#{email,jdbcType=OTHER};
    2、jdbcTypeForNull=NULL
        &lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;NULL&quot;/&gt;</code></pre>]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis总结（2）</title>
    <url>/2020/ckbj29re80007csvfhi5y2h22/</url>
    <content><![CDATA[<a id="more"></a>

<p>@<a href="MyBatis（2）">TOC</a> </p>
<h2 id="一、增删改查CRUD的映射文件配置"><a href="#一、增删改查CRUD的映射文件配置" class="headerlink" title="一、增删改查CRUD的映射文件配置"></a>一、增删改查CRUD的映射文件配置</h2><h3 id="1-增加Employee"><a href="#1-增加Employee" class="headerlink" title="1. 增加Employee"></a>1. 增加Employee</h3><p>EmployeeMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">addEmp</span><span class="params">(Employee employee)</span></span>;</span><br></pre></td></tr></table></figure>
<p>xml映射文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;insert id=<span class="string">"addEmp"</span> parameterType=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.bean.Employee"</span></span><br><span class="line">useGeneratedKeys=<span class="string">"true"</span> keyProperty=<span class="string">"id"</span>&gt;</span><br><span class="line">    <span class="function">insert into <span class="title">tbl_employee</span><span class="params">(last_name,email,gender)</span></span></span><br><span class="line"><span class="function">    <span class="title">values</span><span class="params">(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span></span></span><br><span class="line"><span class="function">&lt;/insert&gt;</span></span><br></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EmployeeMapper mapper = openSession.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加</span></span><br><span class="line">Employee employee = <span class="keyword">new</span> Employee(<span class="keyword">null</span>, <span class="string">"jerry"</span>, <span class="string">"jerry@Lemon.com"</span>, <span class="string">"1"</span>);</span><br><span class="line">Long addEmp = mapper.addEmp(employee);</span><br><span class="line">System.out.println(addEmp);</span><br><span class="line"><span class="comment">// 获取自增主键的值</span></span><br><span class="line">System.out.println(employee.getId());</span><br></pre></td></tr></table></figure>
<p>（1）由于是增加操作，所以返回值可以是update的条目数，而输入的参数是Employee对象，所以在xml配置文件中使用<code>parameterType</code>表示参数类型<br>（2）对于自增主键id，<code>useGeneratedKeys=&quot;true&quot;</code>表示使用自增主键获取主键值策略；<code>keyProperty=&quot;id&quot;</code>指定对应的主键属性，使得MyBatis获取到主键后，将这个值封装给对象的哪个属性</p>
<h3 id="2-更新Employee"><a href="#2-更新Employee" class="headerlink" title="2. 更新Employee"></a>2. 更新Employee</h3><p>EmployeeMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateEmp</span><span class="params">(Employee employee)</span></span>;</span><br></pre></td></tr></table></figure>
<p>xml映射文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;update id=<span class="string">"updateEmp"</span>&gt;</span><br><span class="line">       update tbl_employee</span><br><span class="line">       set last_name=#&#123;lastName&#125;,email=#&#123;email&#125;,gender=#&#123;gender&#125;</span><br><span class="line">       where id=#&#123;id&#125;</span><br><span class="line">   &lt;/update&gt;</span><br></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EmployeeMapper mapper = openSession.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line">Employee employee = <span class="keyword">new</span> Employee(<span class="number">2</span>, <span class="string">"jerry"</span>, <span class="string">"jerry@Lemon.com"</span>, <span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">boolean</span> b = mapper.updateEmp(employee);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>
<p>（1）MyBatis会自动根据传入的对象，获取到id值，填充到where条件中进行更新<br>（2）update可以返回一个boolean类型，表示是否更新成功</p>
<h3 id="3-根据Id删除Employee"><a href="#3-根据Id删除Employee" class="headerlink" title="3. 根据Id删除Employee"></a>3. 根据Id删除Employee</h3><p>EmployeeMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">deleteEmp</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>
<p>xml映射文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;delete id=<span class="string">"deleteEmp"</span>&gt;</span><br><span class="line">       delete from tbl_employee</span><br><span class="line">       where id=#&#123;id&#125;</span><br><span class="line">   &lt;/delete&gt;</span><br></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EmployeeMapper mapper = openSession.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">Long deleteEmp = mapper.deleteEmp(<span class="number">2</span>);</span><br><span class="line">System.out.println(deleteEmp);</span><br></pre></td></tr></table></figure>
<p>（1）delete可以返回一个Long类型的值，表示删除的条目数</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="==注意=="></a>==注意==</h3><p>由于在创建SqlSession对象时，默认不会自动提交数据<br>因此在CRUD操作完成后一定要手动提交数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">openSession.commit();</span><br></pre></td></tr></table></figure>
<h3 id="4-多个输入参数的查询"><a href="#4-多个输入参数的查询" class="headerlink" title="4. 多个输入参数的查询"></a>4. 多个输入参数的查询</h3><h6 id="方法一：命名参数-Param-quot-quot"><a href="#方法一：命名参数-Param-quot-quot" class="headerlink" title="方法一：命名参数 @Param(&quot; &quot;)"></a>方法一：命名参数 <code>@Param(&quot; &quot;)</code></h6><p>EmployeeMapper接口：根据id和lastName获取Emp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByIdAndLastName</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id, @<span class="title">Param</span><span class="params">(<span class="string">"lastName"</span>)</span> String lastName)</span>;</span><br></pre></td></tr></table></figure>
<p>xml映射文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getEmpByIdAndLastName"</span> resultType=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.bean.Employee"</span>&gt;</span><br><span class="line">       select * from tbl_employee where id=#&#123;id&#125; and last_name=#&#123;lastName&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EmployeeMapper mapper = openSession.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个参数：命名参数</span></span><br><span class="line">Employee employee = mapper.getEmpByIdAndLastName(<span class="number">1</span>, <span class="string">"tom"</span>);</span><br><span class="line">System.out.println(employee);</span><br></pre></td></tr></table></figure>
<h6 id="方法二：POJO的Map（将多个参数封装成map）"><a href="#方法二：POJO的Map（将多个参数封装成map）" class="headerlink" title="方法二：POJO的Map（将多个参数封装成map）"></a>方法二：POJO的Map（将多个参数封装成map）</h6><p>EmployeeMapper接口：根据id和lastName获取Emp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByMap</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>
<p>xml映射文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getEmpByMap"</span> resultType=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.bean.Employee"</span>&gt;</span><br><span class="line">       &lt;!-- 参数值的获取 #&#123;&#125;和$&#123;&#125;--&gt;</span><br><span class="line">       select * from $&#123;tableName&#125; where id=$&#123;id&#125; and last_name=#&#123;lastName&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EmployeeMapper mapper = openSession.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"id"</span>, <span class="number">1</span>);</span><br><span class="line">map.put(<span class="string">"lastName"</span>, <span class="string">"Tom"</span>);</span><br><span class="line"><span class="comment">// 使用 $&#123;&#125; 对 表名 进行拼接</span></span><br><span class="line">map.put(<span class="string">"tableName"</span>, <span class="string">"tbl_employee"</span>);</span><br><span class="line">Employee employee = mapper.getEmpByMap(map);</span><br><span class="line">System.out.println(employee);</span><br></pre></td></tr></table></figure>
<h3 id="注意-1"><a href="#注意-1" class="headerlink" title="==注意=="></a>==注意==</h3><p>参数值的获取方式：<code>#{ }</code>和<code>${ }</code><br>对于表名，只能使用<code>${ }</code></p>
<h3 id="5-模糊查询"><a href="#5-模糊查询" class="headerlink" title="5. 模糊查询"></a>5. 模糊查询</h3><h5 id="A-返回List类型"><a href="#A-返回List类型" class="headerlink" title="A. 返回List类型"></a>A. 返回List类型</h5><p>EmployeeMapper接口：对名字进行模糊查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getEmpsByLastNameLike</span><span class="params">(String lastName)</span></span>;</span><br></pre></td></tr></table></figure>
<p>xml映射文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getEmpsByLastNameLike"</span> resultType=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.bean.Employee"</span>&gt;</span><br><span class="line">       select * from tbl_employee where last_name like #&#123;lastName&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EmployeeMapper mapper = openSession.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模糊查询（名字含有e字母的），返回集合List类型</span></span><br><span class="line">List&lt;Employee&gt; like = mapper.getEmpsByLastNameLike(<span class="string">"%e%"</span>);</span><br><span class="line"><span class="keyword">for</span> (Employee employee : like) &#123;</span><br><span class="line">	System.out.println(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）如果查询返回的是一个List集合，<code>resultType</code>要写集合中元素的类型 —— Employee</p>
<h5 id="B-返回Map类型，key：列名，value：列对应的值"><a href="#B-返回Map类型，key：列名，value：列对应的值" class="headerlink" title="B. 返回Map类型，key：列名，value：列对应的值"></a>B. 返回Map类型，key：列名，value：列对应的值</h5><p>EmployeeMapper接口：根据id查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getEmpByIdReturnMap</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>
<p>xml映射文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getEmpByIdReturnMap"</span> resultType=<span class="string">"map"</span>&gt;</span><br><span class="line">       select * from tbl_employee where id=#&#123;id&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EmployeeMapper mapper = openSession.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回Map类型</span></span><br><span class="line">Map&lt;String, Object&gt; map = mapper.getEmpByIdReturnMap(<span class="number">1</span>);</span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure>
<p>（1）如果返回的是一个Map，<code>resultType</code>要写map</p>
<h5 id="B-返回多条记录封装的Map类型，key：主键，value：每一条记录（对象）"><a href="#B-返回多条记录封装的Map类型，key：主键，value：每一条记录（对象）" class="headerlink" title="B. 返回多条记录封装的Map类型，key：主键，value：每一条记录（对象）"></a>B. 返回多条记录封装的Map类型，key：主键，value：每一条记录（对象）</h5><p>EmployeeMapper接口：模糊查询多条记录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapKey</span>(<span class="string">"id"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map&lt;Integer, Employee&gt; <span class="title">getEmpByLastNameLikeReturnMap</span><span class="params">(String lastName)</span></span>;</span><br></pre></td></tr></table></figure>
<p>xml映射文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getEmpByLastNameLikeReturnMap"</span> resultType=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.bean.Employee"</span>&gt;</span><br><span class="line">       select * from tbl_employee where last_name like #&#123;lastName&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EmployeeMapper mapper = openSession.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多条记录封装成一个map</span></span><br><span class="line">Map&lt;Integer, Employee&gt; map = mapper.getEmpByLastNameLikeReturnMap(<span class="string">"%r%"</span>);</span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure>
<p>（1）如果返回的是一个存储多条记录的Map，resultType要写map中存储的value对象类型<br>（2）<code>@MapKey(&quot;id&quot;)</code>：告诉MyBatis封装这个map时，使用哪个属性作为map的key</p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode热题Hot（1）</title>
    <url>/2020/ckbj29rea0008csvfbbqy4xoa/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="LeetCode热题Hot-（1）"><a href="#LeetCode热题Hot-（1）" class="headerlink" title="LeetCode热题Hot （1）"></a>LeetCode热题Hot （1）</h2><h4 id="两数之和："><a href="#两数之和：" class="headerlink" title="两数之和："></a>两数之和：</h4><ul>
<li>给定一个整数数组 arr 和一个目标值 target</li>
<li>请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。</li>
</ul>
<h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><ul>
<li><p>一开始考虑的是双指针（参考==剑指Offer 42==），但是要注意：数组是无序的，如果移动指针，不能确定是要加上还是减去这个值</p>
<pre><code>剑指Offer 42：输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S</code></pre></li>
<li><p>所以可以借鉴 ==累加和等于num的最长子数组，可正可负可0== 的思路</p>
</li>
<li><p>将求和问题转换成剩余需要的数的问题</p>
</li>
<li><p>每遍历一个数，就求出当前数还需要的数：<code>target-arr[i]</code>，使用HashMap存储当前的数</p>
</li>
<li><p>如果map中有该数还需要的数<code>target-arr[i]</code>，那么正好可以凑成target，即为答案。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> target) &#123;</span><br><span class="line">       <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">       HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(map.containsKey(target - arr[i]))&#123;</span><br><span class="line">               res[<span class="number">0</span>] = i;</span><br><span class="line">               res[<span class="number">1</span>] = map.get(target - arr[i]);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           map.put(arr[i], i);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LeetCode热题Hot100</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis总结（1）</title>
    <url>/2020/ckbj29ree000ccsvf7ffcd86w/</url>
    <content><![CDATA[<a id="more"></a>


<p>@<a href="MyBatis（1）">TOC</a></p>
<h2 id="一、MyBatis获取数据表的步骤："><a href="#一、MyBatis获取数据表的步骤：" class="headerlink" title="一、MyBatis获取数据表的步骤："></a>一、MyBatis获取数据表的步骤：</h2><ol>
<li><strong>配置xml全局配置文件mybatis-config.xml</strong><br>存储数据库连接的4个基本信息和一些基本设置，以及            mapper注册信息</li>
<li><strong>配置sql映射文件EmployeeMapper.xml</strong><br>配置了每一个sql语句和sql的映射信息：唯一标识id，返回值类型resultType/resultMap</li>
<li><strong>将sql映射文件EmployeeMapper.xml注册到全局配置文件mybatis-config.xml中</strong></li>
<li><strong>主函数逻辑</strong><br>（1）根据全局配置文件，创建一个SqlSessionFactory对象<br>（2）使用<code>sqlSessionFactory.openSession()</code>获取SqlSession对象，能够直接执行已经注册（映射）的sql语句<br><strong>一个sqlSeesion就代表和数据库的一次会话，用完要关闭</strong><br>（3）使用sql的唯一标识id，告诉MyBatis要执行哪个sql</li>
</ol>
<p><em>改进：接口式编程</em></p>
<ol>
<li>一个Mapper接口就对应一个xxxMapper.xml配置文件</li>
<li>Mapper接口中定义CRUD方法，但是不需要定义其实现类，因为MyBatis提供了一个接口和xml配置文件动态绑定的功能，会为接口生成一个Proxy代理对象<code>openSession.getMapper(Mapper接口.class)</code></li>
</ol>
<hr>
<h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><p>Employee对象（对应于数据表中的各个字段值）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Employee&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", lastName='"</span> + lastName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", gender='"</span> + gender + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ol>
<li>全局配置文件mybatis-config.xml<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"development"</span>&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"development"</span>&gt;</span><br><span class="line">            &lt;!-- 事务管理器 --&gt;</span><br><span class="line">            &lt;transactionManager type=<span class="string">"JDBC"</span>/&gt;</span><br><span class="line">            &lt;!-- 数据源信息 --&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span> value=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"自己设置的数据库密码"</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--  将写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中  --&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"mybatis_1_HelloWorld/conf/EmployeeMapper.xml"</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li>
<li>定义接口EmployeeMapper.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>sql映射文件EmployeeMapper.xml<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=<span class="string">"mybatis_1_HelloWorld.com.Lemon.mybatis.dao.EmployeeMapper"</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    <span class="number">1</span>. namespace：名称空间，TODO 指定为接口的全类名</span><br><span class="line">       ——从而将接口文件和sql映射文件绑定</span><br><span class="line">    <span class="number">2</span>. 接口中的getEmpById()方法的功能和select语句功能是相同的</span><br><span class="line">       所以可以将select的id改成接口方法名</span><br><span class="line">       ——从而将接口方法和select标签绑定</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;select id=<span class="string">"getEmpById"</span> resultType=<span class="string">"mybatis_1_HelloWorld.com.Lemon.mybatis.bean.Employee"</span>&gt;</span><br><span class="line">            select id,last_name lastName,email,gender from tbl_employee where id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li>
<li>主函数逻辑</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 根据xml配置文件（全局配置文件mybatis-config.xml），创建sqlSessionFactory对象</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       String resource = <span class="string">"mybatis_1_HelloWorld/conf/mybatis-config.xml"</span>;</span><br><span class="line">       InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">       SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">       <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">// 1. 获取sqlSessionFactory对象</span></span><br><span class="line">       SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2. 获取SqlSession实例</span></span><br><span class="line">       SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 3. 获取接口的实现类对象</span></span><br><span class="line">           <span class="comment">// TODO 会为接口自动创建一个Proxy代理对象，通过代理对象去执行CRUD方法</span></span><br><span class="line">           EmployeeMapper mapper = openSession.getMapper(EmployeeMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 从这里可以看出mapper是一个代理类</span></span><br><span class="line">           System.out.println(mapper.getClass());</span><br><span class="line"></span><br><span class="line">           Employee employee = mapper.getEmpById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">           System.out.println(employee);</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           openSession.close();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="注意！！！"><a href="#注意！！！" class="headerlink" title="==注意！！！=="></a>==注意！！！==</h3><p>（1）在全局配置文件中，使用<code>&lt;mapper&gt;</code>标签将sql映射文件注册进来<br>（2）在sql映射文件中，<code>namespace</code>名称空间要写对应的Mapper接口的全类名<br>（3）在sql映射文件中，使用<code>&lt;select&gt;</code>标签定义sql语句，<code>id</code>是对应Mapper接口的方法名，<code>resultType</code>是方法（sql）的返回值类型<br>（4）select语句中使用<code>#{ }</code>的方式，从外部传进参数到这里<br>（5）一个SqlSession就代表和数据库的一次会话，所以用完必须关闭</p>
<hr>
<h2 id="二、基于注解的sql注册"><a href="#二、基于注解的sql注册" class="headerlink" title="二、基于注解的sql注册"></a>二、基于注解的sql注册</h2><p>我们可以使用<code>@Select</code>注解，标注在Mapper接口的方法上，从而可以省去xml映射文件，直接在全局配置文件中使用<code>class</code>进行注册</p>
<h2 id="具体代码-1"><a href="#具体代码-1" class="headerlink" title="具体代码"></a>具体代码</h2><ol>
<li><p>基于注解的Mapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapperAnnotation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from tbl_employee where id = #&#123;id&#125; "</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>全局配置文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper <span class="class"><span class="keyword">class</span></span>=<span class="string">"mybatis_2_config.com.Lemon.mybatis.dao.EmployeeMapperAnnotation"</span>/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure>
<h2 id="三、-全局配置文件中的setting标签"><a href="#三、-全局配置文件中的setting标签" class="headerlink" title="三、 全局配置文件中的setting标签"></a>三、 全局配置文件中的setting标签</h2><p><code>mapUnderscoreToCamelCase</code>：是否开启驼峰命名自动映射，即从经典数据库列名 “last_name” 映射到经典 Java 属性名 “lastName”</p>
<p> 例如：<br> 数据表中字段是last_name，而在idea中定义的对象属性名是lastName<br> 如果不开启的话，使用<code>select last_name from tbl_employee where id = #{id}</code>是查不到lastName信息的，必须为其取别名。<br> 而如果开启的话，就不需要取别名，可以直接查询到该字段信息<br>全局配置文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;setting name=<span class="string">"mapUnderscoreToCamelCase"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>
<p>sql映射文件</p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getEmpById"</span> resultType=<span class="string">"mybatis_2_config.com.Lemon.mybatis.bean.Employee"</span>&gt;</span><br><span class="line">        &lt;!-- TODO 通过开启mapUnderscoreToCamelCase，可以自动识别 --&gt;</span><br><span class="line">        select * from tbl_employee where id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis总结（4）</title>
    <url>/2020/ckbj29ref000ecsvfagm3d7y5/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="MyBatis（4）"><a href="#MyBatis（4）" class="headerlink" title="MyBatis（4）"></a>MyBatis（4）</h1><h2 id="一、DynamicSQL-动态SQL"><a href="#一、DynamicSQL-动态SQL" class="headerlink" title="一、DynamicSQL 动态SQL"></a>一、DynamicSQL 动态SQL</h2><h3 id="1-if标签——用于判断"><a href="#1-if标签——用于判断" class="headerlink" title="1. if标签——用于判断"></a>1. <code>if</code>标签——用于判断</h3><p><code>test</code>属性：判断表达式OGNL</p>
<p>要求：查询哪个字段（即传入了哪个字段），那么查询条件就带上这个字段的值</p>
<p>EmployeeMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getEmpsByConditionIf</span><span class="params">(Employee employee)</span></span>;</span><br></pre></td></tr></table></figure>
<p>EmployeeMapper.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getEmpsByConditionIf"</span> resultType=<span class="string">"mybatis_4_DynamicSQL.com.Lemon.mybatis.bean.Employee"</span>&gt;</span><br><span class="line">       select *</span><br><span class="line">       from mybatis.tbl_employee</span><br><span class="line">       &lt;where&gt;</span><br><span class="line">           &lt;<span class="keyword">if</span> test=<span class="string">"id!=null"</span>&gt;</span><br><span class="line">               id = #&#123;id&#125;</span><br><span class="line">           &lt;/if&gt;</span><br><span class="line">           &lt;<span class="keyword">if</span> test=<span class="string">"lastName!=null &amp;amp;&amp;amp; lastName!=&amp;quot;&amp;quot;"</span>&gt;</span><br><span class="line">               and last_name like #&#123;lastName&#125;</span><br><span class="line">           &lt;/if&gt;</span><br><span class="line">           &lt;<span class="keyword">if</span> test=<span class="string">"email!=null and email.trim()!=&amp;quot;&amp;quot;"</span>&gt;</span><br><span class="line">               and email = #&#123;email&#125;</span><br><span class="line">           &lt;/if&gt;</span><br><span class="line">           &lt;<span class="keyword">if</span> test=<span class="string">"gender==0 or gender==1"</span>&gt;</span><br><span class="line">               and gender = #&#123;gender&#125;;</span><br><span class="line">           &lt;/if&gt;</span><br><span class="line">       &lt;/where&gt;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>（1）<code>where</code>标签：将所有的查询条件包含在内，但是只会去掉开头的第一个多出来的and或者or —— 解决sql拼串问题<br>（2）<code>test</code>表达式中遇到特殊符号应写转义字符，具体参考OGNL官方文档<br>（3） 在if内部的查询条件中，==and要写在前面==</p>
<p>主函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">测试<span class="number">1</span>：</span><br><span class="line">	<span class="comment">// gender为空：查询条件不带gender —— where id = ? and last_name like ? and email = ?</span></span><br><span class="line">	Employee employee = <span class="keyword">new</span> Employee(<span class="number">4</span>, <span class="string">"%e%"</span>, <span class="string">"jerry@Lemon.com"</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">测试<span class="number">2</span>：</span><br><span class="line">	<span class="comment">// email和gender为空：查询条件不带email和gender —— where id = ? and last_name like ?</span></span><br><span class="line">	Employee employee = <span class="keyword">new</span> Employee(<span class="number">4</span>, <span class="string">"%e%"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">测试<span class="number">3</span>：</span><br><span class="line">	<span class="comment">// id，email，gender为空，由于第一个条件不满足，所以需要使用where标签，否则会报错：where and last_name like ? —— 正确发送的sql：WHERE last_name like ?</span></span><br><span class="line">	Employee employee = <span class="keyword">new</span> Employee(<span class="keyword">null</span>, <span class="string">"%e%"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Employee&gt; emps = mapper.getEmpsByConditionIf(employee);</span><br><span class="line"><span class="keyword">for</span> (Employee emp : emps) &#123;</span><br><span class="line">	System.out.println(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-trim标签——字符串截取"><a href="#2-trim标签——字符串截取" class="headerlink" title="2. trim标签——字符串截取"></a>2. <code>trim</code>标签——字符串截取</h3><p>（1）<code>prefix</code>：前缀，给拼串后的字符串加一个前缀<br>（2）<code>prefixOverrides</code>：前缀覆盖，去掉整个字符串前面的字符<br>（3）<code>suffix</code>：后缀，给拼串后的字符串加一个后缀<br>（4）<code>suffixOverrides</code>：后缀覆盖，去掉整个字符串后面的字符</p>
<p>用途：如果在查询条件后面多出and或者or，<code>where</code>标签是解决不了的，可以使用<code>trim</code>标签进行截取</p>
<p>==<code>where</code>标签体的改进：==</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">select *</span><br><span class="line">      from mybatis.tbl_employee</span><br><span class="line">      </span><br><span class="line">&lt;trim prefix=<span class="string">"where"</span> suffixOverrides=<span class="string">"and"</span>&gt;</span><br><span class="line">          &lt;<span class="keyword">if</span> test=<span class="string">"id!=null"</span>&gt;</span><br><span class="line">              id = #&#123;id&#125; and</span><br><span class="line">          &lt;/if&gt;</span><br><span class="line">          &lt;<span class="keyword">if</span> test=<span class="string">"lastName!=null &amp;amp;&amp;amp; lastName!=&amp;quot;&amp;quot;"</span>&gt;</span><br><span class="line">              last_name like #&#123;lastName&#125; and</span><br><span class="line">          &lt;/if&gt;</span><br><span class="line">          &lt;<span class="keyword">if</span> test=<span class="string">"email!=null and email.trim()!=&amp;quot;&amp;quot;"</span>&gt;</span><br><span class="line">              email = #&#123;email&#125; and</span><br><span class="line">          &lt;/if&gt;</span><br><span class="line">          &lt;<span class="keyword">if</span> test=<span class="string">"gender==0 or gender==1"</span>&gt;</span><br><span class="line">              gender = #&#123;gender&#125;;</span><br><span class="line">          &lt;/if&gt;</span><br><span class="line">      &lt;/trim&gt;</span><br></pre></td></tr></table></figure>
<p>这里就表示在整个字符串前加上<code>where</code>，在整个字符串后去掉<code>and</code></p>
<h3 id="3-choose-when-otherwise：分支选择switch-case"><a href="#3-choose-when-otherwise：分支选择switch-case" class="headerlink" title="3. choose-when-otherwise：分支选择switch-case"></a>3. <code>choose-when-otherwise</code>：分支选择switch-case</h3><p>要求：只查询一个，如果带了id就用id查，如果带了lastName就用lastName查</p>
<p>EmployeeMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getEmpsByConditionChoose</span><span class="params">(Employee employee)</span></span>;</span><br></pre></td></tr></table></figure>
<p>EmployeeMapper.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getEmpsByConditionChoose"</span> resultType=<span class="string">"mybatis_4_DynamicSQL.com.Lemon.mybatis.bean.Employee"</span>&gt;</span><br><span class="line">       select *</span><br><span class="line">       from mybatis.tbl_employee</span><br><span class="line">       &lt;where&gt;</span><br><span class="line">           &lt;choose&gt;</span><br><span class="line">               &lt;when test=<span class="string">"id!=null"</span>&gt;</span><br><span class="line">                   id=#&#123;id&#125;</span><br><span class="line">               &lt;/when&gt;</span><br><span class="line">               &lt;when test=<span class="string">"lastName!=null"</span>&gt;</span><br><span class="line">                   last_name like #&#123;lastName&#125;</span><br><span class="line">               &lt;/when&gt;</span><br><span class="line">               &lt;when test=<span class="string">"email!=null"</span>&gt;</span><br><span class="line">                   email=#&#123;email&#125;</span><br><span class="line">               &lt;/when&gt;</span><br><span class="line">               &lt;otherwise&gt;</span><br><span class="line">                   gender=<span class="number">0</span></span><br><span class="line">               &lt;/otherwise&gt;</span><br><span class="line">           &lt;/choose&gt;</span><br><span class="line">       &lt;/where&gt;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">测试<span class="number">1</span>：</span><br><span class="line">	<span class="comment">// where last_name like ?</span></span><br><span class="line">	Employee employee = <span class="keyword">new</span> Employee(<span class="keyword">null</span>, <span class="string">"%e%"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">测试<span class="number">2</span>：</span><br><span class="line">	<span class="comment">// where id=?</span></span><br><span class="line">	Employee employee = <span class="keyword">new</span> Employee(<span class="number">1</span>, <span class="string">"%e%"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">测试<span class="number">3</span>：</span><br><span class="line">	<span class="comment">// where gender=0</span></span><br><span class="line">	Employee employee = <span class="keyword">new</span> Employee(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Employee&gt; emps = mapper.getEmpsByConditionChoose(employee);</span><br><span class="line"><span class="keyword">for</span> (Employee emp : emps) &#123;</span><br><span class="line">	System.out.println(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4、-set标签"><a href="#4、-set标签" class="headerlink" title="4、 set标签"></a>4、 <code>set</code>标签</h3><p>可以防止每个sql语句后的逗号</p>
<p>EmployeeMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateEmp</span><span class="params">(Employee employee)</span></span>;</span><br></pre></td></tr></table></figure>
<p>EmployeeMapper.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;update id=<span class="string">"updateEmp"</span>&gt;</span><br><span class="line">       update mybatis.tbl_employee</span><br><span class="line">       </span><br><span class="line">       &lt;set&gt;</span><br><span class="line">           &lt;<span class="keyword">if</span> test=<span class="string">"lastName!=null"</span>&gt;</span><br><span class="line">               last_name=#&#123;lastName&#125;,</span><br><span class="line">           &lt;/if&gt;</span><br><span class="line">           &lt;<span class="keyword">if</span> test=<span class="string">"email!=null"</span>&gt;</span><br><span class="line">               email=#&#123;email&#125;,</span><br><span class="line">           &lt;/if&gt;</span><br><span class="line">           &lt;<span class="keyword">if</span> test=<span class="string">"gender!=null"</span>&gt;</span><br><span class="line">               gender=#&#123;gender&#125;,</span><br><span class="line">           &lt;/if&gt;</span><br><span class="line">       &lt;/set&gt;</span><br><span class="line">       where id=#&#123;id&#125;</span><br><span class="line">   &lt;/update&gt;</span><br></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SET last_name=? where id=?</span></span><br><span class="line">Employee employee = <span class="keyword">new</span> Employee(<span class="number">1</span>, <span class="string">"Admin"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">mapper.updateEmp(employee);</span><br><span class="line">openSession.commit();</span><br></pre></td></tr></table></figure>
<h3 id="5、foreach标签"><a href="#5、foreach标签" class="headerlink" title="5、foreach标签"></a>5、<code>foreach</code>标签</h3><p>（1）<code>collection</code>：指定要遍历的集合名称<br>（2）<code>item</code>：将当前遍历集合得到的元素赋值给指定的变量<br>（3）<code>separator</code>：元素之间的分隔符<br>（4）<code>open</code>：将遍历得到的所有结果，拼接一个开始的字符<br>（5）<code>close</code>：将遍历得到的所有结果，拼接一个结束的字符<br>（6）<code>index</code>：<br>     遍历list时，index：索引，item：当前值<br>     遍历map时，index：map的key，item：map的value<br> #{变量名}就能取出变量的值，也就是当前遍历集合得到的元素</p>
<p>EmployeeMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getEmpsByConditionForeach</span><span class="params">(@Param(<span class="string">"ids"</span>)</span>List&lt;Integer&gt; ids)</span>;</span><br></pre></td></tr></table></figure>
<p>EmployeeMapper.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getEmpsByConditionForeach"</span> resultType=<span class="string">"mybatis_4_DynamicSQL.com.Lemon.mybatis.bean.Employee"</span>&gt;</span><br><span class="line">       select * from mybatis.tbl_employee </span><br><span class="line">       </span><br><span class="line">       &lt;foreach collection=<span class="string">"ids"</span> item=<span class="string">"item_id"</span> separator=<span class="string">","</span> open=<span class="string">"where id in ("</span> close=<span class="string">")"</span>&gt;</span><br><span class="line">           #&#123;item_id&#125;</span><br><span class="line">       &lt;/foreach&gt;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// where id in ( ? , ? , ? , ? )</span></span><br><span class="line">List&lt;Employee&gt; list = mapper.getEmpsByConditionForeach(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"><span class="keyword">for</span> (Employee employee : list) &#123;</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>==等效于：<code>&lt;!-- where id in (1, 2, 3, 4) --&gt;</code>==</p>
<h3 id="6、-foreach的批量保存"><a href="#6、-foreach的批量保存" class="headerlink" title="6、 foreach的批量保存"></a>6、 <code>foreach</code>的批量保存</h3><p>EmployeeMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEmps</span><span class="params">(@Param(<span class="string">"emps"</span>)</span>List&lt;Employee&gt; emps)</span>;</span><br></pre></td></tr></table></figure>
<p>EmployeeMapper.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;insert id=<span class="string">"addEmps"</span>&gt;</span><br><span class="line">       INSERT INTO mybatis.tbl_employee(last_name, email, gender, d_id)</span><br><span class="line">       VALUES</span><br><span class="line">           &lt;foreach collection=<span class="string">"emps"</span> item=<span class="string">"emp"</span> separator=<span class="string">","</span>&gt;</span><br><span class="line">               (#&#123;emp.lastName&#125;, #&#123;emp.email&#125;, #&#123;emp.gender&#125;, #&#123;emp.dept.id&#125;)</span><br><span class="line">           &lt;/foreach&gt;</span><br><span class="line">   &lt;/insert&gt;</span><br></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// INSERT INTO mybatis.tbl_employee(last_name, email, gender, d_id) VALUES (?, ?, ?, ?) , (?, ?, ?, ?)</span></span><br><span class="line">List&lt;Employee&gt; emps = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">emps.add(<span class="keyword">new</span> Employee(<span class="keyword">null</span>, <span class="string">"tom"</span>, <span class="string">"tom@126.com"</span>, <span class="string">"0"</span>, <span class="keyword">new</span> Department(<span class="number">1</span>)));</span><br><span class="line">emps.add(<span class="keyword">new</span> Employee(<span class="keyword">null</span>, <span class="string">"frank"</span>, <span class="string">"frank@126.com"</span>, <span class="string">"1"</span>, <span class="keyword">new</span> Department(<span class="number">2</span>)));</span><br><span class="line"></span><br><span class="line">mapper.addEmps(emps);</span><br><span class="line">openSession.commit();</span><br></pre></td></tr></table></figure>

<h2 id="二、MyBatis的两个内置参数"><a href="#二、MyBatis的两个内置参数" class="headerlink" title="二、MyBatis的两个内置参数"></a>二、MyBatis的两个内置参数</h2><pre><code>（1）_parameter：代表整个参数
     对于单个参数：_parameter就是这个参数
    对于多个参数：参数会被封装成一个map，那么_parameter就是这个map
（2）_databaseId：
    如果配置了DatabaseInProvider标签，那么_databaseId就是代表当前数据库的别名</code></pre><h2 id="三、bind标签"><a href="#三、bind标签" class="headerlink" title="三、bind标签"></a>三、<code>bind</code>标签</h2><p>可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值<br>            （1）<code>name</code>：后续引用变量的名字<br>            （2）<code>value</code>：用于拼接的表达式</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bind name=<span class="string">"_lastName"</span> value=<span class="string">"'%'+lastName+'%'"</span>/&gt;</span><br><span class="line">       &lt;<span class="keyword">if</span> test=<span class="string">"_databaseId=='mysql'"</span>&gt;</span><br><span class="line">           select * from mybatis.tbl_employee</span><br><span class="line">           &lt;<span class="keyword">if</span> test=<span class="string">"_parameter!=null"</span>&gt; &lt;!-- _parameter就表示employee对象 --&gt;</span><br><span class="line">               where last_name like #&#123;_lastName&#125;</span><br><span class="line">           &lt;/if&gt;</span><br><span class="line">       &lt;/if&gt;</span><br></pre></td></tr></table></figure>
<h2 id="四、sql标签"><a href="#四、sql标签" class="headerlink" title="四、sql标签"></a>四、<code>sql</code>标签</h2><p>抽取可重用的sql片段，方便后面引用</p>
<pre><code>1. sql抽取：将经常要查询或插入用的列名抽取出来，方面引用
2. 在sql语句中，可以用include来引用已经抽取出来的sql
3. include内部还可以自定义property，sql标签内部就能使用自定义的属性
4. include-property的取值的正确方式：${prop}，不能用#{ }</code></pre>]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis总结（3）</title>
    <url>/2020/ckbj29rej000jcsvf0xleapqv/</url>
    <content><![CDATA[<a id="more"></a>


<p>@<a href="MyBatis（3）">TOC</a></p>
<h2 id="一、-ResultMap：自定义结果映射规则"><a href="#一、-ResultMap：自定义结果映射规则" class="headerlink" title="一、 ResultMap：自定义结果映射规则"></a>一、 ResultMap：自定义结果映射规则</h2><p>在xml映射文件中，除了可以使用<code>resultType</code>定义返回值类型外，还可以使用<code>resultMap</code>自定义结果集映射规则</p>
<p>EmployeeMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>
<p>xml映射文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getEmpById"</span> resultMap=<span class="string">"MyEmp"</span>&gt;</span><br><span class="line">       select * from mybatis.tbl_employee where id=#&#123;id&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>resultMap定义</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;resultMap id=<span class="string">"MyEmp"</span> type=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.bean.Employee"</span>&gt;</span><br><span class="line">       &lt;id column=<span class="string">"id"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">       &lt;result column=<span class="string">"last_name"</span> property=<span class="string">"lastName"</span>/&gt;</span><br><span class="line">       &lt;result column=<span class="string">"email"</span> property=<span class="string">"email"</span>/&gt;</span><br><span class="line">       &lt;result column=<span class="string">"gender"</span> property=<span class="string">"gender"</span>/&gt;</span><br><span class="line">   &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>
<p>（1）<code>id</code>：主键的封装规则<br>（2）<code>result</code>：普通列的封装规则<br>（3）<code>column</code>：指定是表中的哪一列<br>（4）<code>property</code>：指定该列所对应的javaBean对象的哪一个属性<br>（5）注意到这里定义了映射规则，所以就算不开启<code>mapUnderscoreToCamelCase</code>驼峰命名规则，也可以识别到对应的属性<br>（6）映射规则：==数据表中列名column &lt;=&gt; java对象的属性名property==</p>
<h2 id="二、association的关联查询"><a href="#二、association的关联查询" class="headerlink" title="二、association的关联查询"></a>二、association的关联查询</h2><p><strong>要求查询Employee的同时查询员工所在的部门</strong><br>Employee.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String lastName;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Department dept;</span><br></pre></td></tr></table></figure>
<p>Department.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String departmentName;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> List&lt;Employee&gt; emps;</span><br></pre></td></tr></table></figure>

<p>查询结果：id  last_name  gender    d_id     did  dept_name</p>
<h4 id="法一：级联属性"><a href="#法一：级联属性" class="headerlink" title="法一：级联属性"></a><strong>法一：级联属性</strong></h4><p>由于在Emp中定义了Departrment属性，因此可以使用<code>dept.id</code>和<code>dept.departmentName</code>查询员工所在的部门<br>EmployeeMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpAndDept</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>
<p>xml映射文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getEmpAndDept"</span> resultMap=<span class="string">"MyDifEmp"</span>&gt;</span><br><span class="line">       SELECT e.id id, e.last_name last_name, e.gender gender, e.d_id d_id,</span><br><span class="line">              d.id did, d.dept_name dept_name</span><br><span class="line">       FROM mybatis.tbl_employee e, mybatis.tbl_dept d</span><br><span class="line">       WHERE e.d_id=d.id AND e.id=#&#123;id&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>resultMap定义</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;resultMap id=<span class="string">"MyDifEmp"</span> type=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.bean.Employee"</span>&gt;</span><br><span class="line">       &lt;id column=<span class="string">"id"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">       &lt;result column=<span class="string">"last_name"</span> property=<span class="string">"lastName"</span>/&gt;</span><br><span class="line">       &lt;result column=<span class="string">"gender"</span> property=<span class="string">"gender"</span>/&gt;</span><br><span class="line">       &lt;!-- TODO 法一：级联属性 --&gt;</span><br><span class="line">       &lt;result column=<span class="string">"did"</span> property=<span class="string">"dept.id"</span>/&gt;</span><br><span class="line">       &lt;result column=<span class="string">"dept_name"</span> property=<span class="string">"dept.departmentName"</span>/&gt;</span><br><span class="line">   &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>
<h4 id="法二：association标签"><a href="#法二：association标签" class="headerlink" title="法二：association标签"></a><strong>法二：association标签</strong></h4><p><code>association</code>标签：用于在<code>ResultMap</code>中嵌套定义单个对象的封装规则<br><code>property</code>属性：指定外层对象的哪个属性是要关联（嵌套）的对象<br><code>javaType</code>属性：指定该关联对象的类型（全类名） ==不能省略==<br>xml映射文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getEmpAndDept"</span> resultMap=<span class="string">"MyDifEmp2"</span>&gt;</span><br><span class="line">       SELECT e.id id, e.last_name last_name, e.gender gender, e.d_id d_id,</span><br><span class="line">              d.id did, d.dept_name dept_name</span><br><span class="line">       FROM mybatis.tbl_employee e, mybatis.tbl_dept d</span><br><span class="line">       WHERE e.d_id=d.id AND e.id=#&#123;id&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>resultMap定义</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;resultMap id=<span class="string">"MyDifEmp2"</span> type=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.bean.Employee"</span>&gt;</span><br><span class="line">       &lt;id column=<span class="string">"id"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">       &lt;result column=<span class="string">"last_name"</span> property=<span class="string">"lastName"</span>/&gt;</span><br><span class="line">       &lt;result column=<span class="string">"gender"</span> property=<span class="string">"gender"</span>/&gt;</span><br><span class="line">      </span><br><span class="line">       &lt;association property=<span class="string">"dept"</span> javaType=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.bean.Department"</span>&gt;</span><br><span class="line">           &lt;id column=<span class="string">"did"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">           &lt;result column=<span class="string">"dept_name"</span> property=<span class="string">"departmentName"</span>/&gt;</span><br><span class="line">       &lt;/association&gt;</span><br><span class="line">   &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>

<p>主函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Employee empAndDept = mapper.getEmpAndDept(<span class="number">1</span>);</span><br><span class="line">System.out.println(empAndDept);</span><br><span class="line">System.out.println(empAndDept.getDept());</span><br></pre></td></tr></table></figure>

<h2 id="三、association的分步查询"><a href="#三、association的分步查询" class="headerlink" title="三、association的分步查询"></a>三、association的分步查询</h2><p>关联查询可以改成分步查询：<br>由于Emp和Dept是通过id进行关联的，所以可以根据Emp的id查询到Dept的信息</p>
<pre><code>1. 按照员工id查询员工信息：id  last_name  gender  email  d_id
2. 根据查询到的员工信息中的d_id值，到部门表中查出部门信息：id  dept_name
3. 将部门信息设置到查询到的员工中</code></pre><p>sql语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SELECT * FROM tbl_employee WHERE id =<span class="number">1</span>;</span><br><span class="line">SELECT * FROM tbl_dept WHERE id=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><code>association</code>标签：用于在<code>ResultMap</code>中嵌套定义单个对象的封装规则<br><code>property</code>属性：指定外层对象的哪个属性是要关联（嵌套）的对象<br><code>select</code>属性：表明当前属性<code>property</code>是调用<code>select</code>指定的方法进行查询  ==NameSpace.id的形式==<br><code>column</code>属性：指定将哪一列的值传给这个方法（使得两表关联的列）</p>
<p>EmployeeMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByIdStep</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>
<p>EmployeeMapper.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getEmpByIdStep"</span> resultMap=<span class="string">"MyEmpByStep"</span>&gt;</span><br><span class="line">       select * from mybatis.tbl_employee where id=#&#123;id&#125;</span><br><span class="line">   &lt;/select&gt;</span><br><span class="line">   </span><br><span class="line">&lt;resultMap id=<span class="string">"MyEmpByStep"</span> type=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.bean.Employee"</span>&gt;</span><br><span class="line">       &lt;id column=<span class="string">"id"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">       &lt;result column=<span class="string">"last_name"</span> property=<span class="string">"lastName"</span>/&gt;</span><br><span class="line">       &lt;result column=<span class="string">"email"</span> property=<span class="string">"email"</span>/&gt;</span><br><span class="line">       &lt;result column=<span class="string">"gender"</span> property=<span class="string">"gender"</span>/&gt;</span><br><span class="line">       </span><br><span class="line">       &lt;association property=<span class="string">"dept"</span></span><br><span class="line">                    select=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.dao.DepartmentMapper.getDeptById"</span></span><br><span class="line">                    column=<span class="string">"d_id"</span>/&gt;</span><br><span class="line">   &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>
<p>DepartmentMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Department <span class="title">getDeptById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>
<p>DepartmentMapper.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.dao.DepartmentMapper"</span>&gt;</span><br><span class="line">	&lt;select id=<span class="string">"getDeptById"</span> resultType=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.bean.Department"</span>&gt;</span><br><span class="line">        select id, dept_name departmentName</span><br><span class="line">        from mybatis.tbl_dept</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Employee employee = mapper.getEmpByIdStep(<span class="number">1</span>);</span><br><span class="line">System.out.println(employee);</span><br><span class="line">System.out.println(employee.getDept());</span><br></pre></td></tr></table></figure>

<h2 id="四、分步查询进阶：延迟加载"><a href="#四、分步查询进阶：延迟加载" class="headerlink" title="四、分步查询进阶：延迟加载"></a>四、分步查询进阶：延迟加载</h2><p>使用延迟加载可以在用到Dept查询时，才发送查询Dept的sql语句</p>
<p>全局配置文件mybatis-config.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">       &lt;setting name=<span class="string">"lazyLoadingEnabled"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">       &lt;setting name=<span class="string">"aggressiveLazyLoading"</span> value=<span class="string">"false"</span>/&gt;</span><br><span class="line">   &lt;/settings&gt;</span><br></pre></td></tr></table></figure>
<h2 id="五、collection的关联查询"><a href="#五、collection的关联查询" class="headerlink" title="五、collection的关联查询"></a>五、collection的关联查询</h2><p><strong>查询部门的时候，将部门对应的所有员工信息也查询出来</strong><br>这里由于一个部门可以对应多个员工，所以结果的返回值类型是List</p>
<p>Department.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Employee&gt; emps;</span><br></pre></td></tr></table></figure>
<p>Department接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Department <span class="title">getDeptByIdPlus</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>
<p>Department.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getDeptByIdPlus"</span> resultMap=<span class="string">"MyDept"</span>&gt;</span><br><span class="line">       SELECT d.id        did,</span><br><span class="line">              d.dept_name dept_name,</span><br><span class="line">              e.id        eid,</span><br><span class="line">              e.last_name last_name,</span><br><span class="line">              e.email     email,</span><br><span class="line">              e.gender    gender</span><br><span class="line">       FROM mybatis.tbl_dept d</span><br><span class="line">                LEFT JOIN mybatis.tbl_employee e</span><br><span class="line">                          ON d.id = e.d_id</span><br><span class="line">       WHERE d.id = <span class="number">1</span></span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p><code>collection</code>标签：定义List集合类型的属性的封装规则<br><code>property</code>属性：集合属性的名称（Department对象中定义的List类型的Emps）<br><code>ofType</code>属性：集合中元素的类型Employee</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;resultMap id=<span class="string">"MyDept"</span> type=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.bean.Department"</span>&gt;</span><br><span class="line">       &lt;id column=<span class="string">"did"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">       &lt;result column=<span class="string">"dept_name"</span> property=<span class="string">"departmentName"</span>/&gt;</span><br><span class="line"></span><br><span class="line">       &lt;collection property=<span class="string">"emps"</span> ofType=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.bean.Employee"</span>&gt;</span><br><span class="line">       	&lt;!-- 定义这个集合中元素的封装规则 --&gt;</span><br><span class="line">           &lt;id column=<span class="string">"eid"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">           &lt;result column=<span class="string">"last_name"</span> property=<span class="string">"lastName"</span>/&gt;</span><br><span class="line">           &lt;result column=<span class="string">"email"</span> property=<span class="string">"email"</span>/&gt;</span><br><span class="line">           &lt;result column=<span class="string">"gender"</span> property=<span class="string">"gender"</span>/&gt;</span><br><span class="line">       &lt;/collection&gt;</span><br><span class="line">   &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Department department = mapper.getDeptByIdPlus(<span class="number">1</span>);</span><br><span class="line">System.out.println(department);</span><br><span class="line">System.out.println(department.getEmps());</span><br></pre></td></tr></table></figure>
<h2 id="六、collection的分步查询和延迟加载"><a href="#六、collection的分步查询和延迟加载" class="headerlink" title="六、collection的分步查询和延迟加载"></a>六、collection的分步查询和延迟加载</h2><p>根据Dept的id查询指定部门id的员工信息</p>
<p>sql语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SELECT * FROM tbl_dept WHERE id=<span class="number">1</span></span><br><span class="line">   SELECT * FROM tbl_employee WHERE d_id=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><code>collection</code>标签：用于在<code>ResultMap</code>中嵌套定义List类型对象的封装规则<br><code>fetchType</code>属性：设置为lazy表示使用延迟加载（默认）</p>
<p>DepartmentMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Department <span class="title">getDeptByIdStep</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>
<p>DepartmentMapper.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getDeptByIdStep"</span> resultMap=<span class="string">"MyDeptStep"</span>&gt;</span><br><span class="line">       select id, dept_name departmentName</span><br><span class="line">       from mybatis.tbl_dept</span><br><span class="line">       where id = #&#123;id&#125;</span><br><span class="line">   &lt;/select&gt;</span><br><span class="line">   </span><br><span class="line">&lt;resultMap id=<span class="string">"MyDeptStep"</span> type=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.bean.Department"</span>&gt;</span><br><span class="line">       &lt;id column=<span class="string">"id"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">       &lt;result column=<span class="string">"dept_name"</span> property=<span class="string">"departmentName"</span>/&gt;</span><br><span class="line">       &lt;collection property=<span class="string">"emps"</span></span><br><span class="line">                   select=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.dao.EmployeeMapperPlus.getEmpsByDeptId"</span></span><br><span class="line">                   column=<span class="string">"&#123;deptId=id&#125;"</span></span><br><span class="line">                   fetchType=<span class="string">"lazy"</span>/&gt;</span><br><span class="line">   &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>
<p>EmployeeMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getEmpsByDeptId</span><span class="params">(Integer deptId)</span></span>;</span><br></pre></td></tr></table></figure>
<p>EmployeeMapper.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getEmpsByDeptId"</span> resultType=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.bean.Employee"</span>&gt;</span><br><span class="line">       select * from mybatis.tbl_employee where d_id=#&#123;deptId&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Department deptByIdStep = mapper.getDeptByIdStep(<span class="number">1</span>);</span><br><span class="line">System.out.println(deptByIdStep.getDepartmentName());</span><br><span class="line">System.out.println(deptByIdStep.getEmps());</span><br></pre></td></tr></table></figure>

<h2 id="七、discriminator鉴别器"><a href="#七、discriminator鉴别器" class="headerlink" title="七、discriminator鉴别器"></a>七、discriminator鉴别器</h2><p><code>discriminator</code>标签：判断某列的值，根据值进行不同的封装规则（类似于switch-case）<br><code>javaType</code>属性：需要判断的列的值对应的类型<br><code>column</code>属性：需要判断的列名<br>其中<code>case</code>标签表示一个case，<code>value</code>属性表示可能的值，<code>resultType</code>属性表示要封装的结果的类型（==不能省略==）</p>
<p>假设封装规则如下：</p>
<pre><code>1. 如果查出的是女生，就把部门信息查询出来，否则不查询
2. 如果查出的是男生，就把last_name这一列的值赋值给email</code></pre><p>依然使用分步查询的方法<br>EmployeeMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpByIdStep</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>
<p>EmployeeMapper.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">"getEmpByIdStep"</span> resultMap=<span class="string">"MyEmpDis"</span>&gt;</span><br><span class="line">       select * from mybatis.tbl_employee where id=#&#123;id&#125;</span><br><span class="line">   &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;resultMap id=<span class="string">"MyEmpDis"</span> type=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.bean.Employee"</span>&gt;</span><br><span class="line">       &lt;id column=<span class="string">"id"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">       &lt;result column=<span class="string">"last_name"</span> property=<span class="string">"lastName"</span>/&gt;</span><br><span class="line">       &lt;result column=<span class="string">"email"</span> property=<span class="string">"email"</span>/&gt;</span><br><span class="line">       &lt;result column=<span class="string">"gender"</span> property=<span class="string">"gender"</span>/&gt;</span><br><span class="line"></span><br><span class="line">       &lt;discriminator javaType=<span class="string">"string"</span> column=<span class="string">"gender"</span>&gt;</span><br><span class="line">           &lt;!-- 女生 --&gt;</span><br><span class="line">           &lt;<span class="keyword">case</span> value=<span class="string">"0"</span> resultType=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.bean.Employee"</span>&gt;</span><br><span class="line">               &lt;!-- 定义规则：如果查出的是女生，就把部门信息查询出来，否则不查询 --&gt;</span><br><span class="line">               &lt;association property=<span class="string">"dept"</span></span><br><span class="line">                            select=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.dao.DepartmentMapper.getDeptById"</span></span><br><span class="line">                            column=<span class="string">"d_id"</span>/&gt;</span><br><span class="line">           &lt;/case&gt;</span><br><span class="line">           &lt;!-- 男生 --&gt;</span><br><span class="line">           &lt;<span class="keyword">case</span> value=<span class="string">"1"</span> resultType=<span class="string">"mybatis_3_mapper.com.Lemon.mybatis.bean.Employee"</span>&gt;</span><br><span class="line">               &lt;!-- 定义规则：如果查出的是男生，就把last_name这一列的值赋值给email --&gt;</span><br><span class="line">               &lt;id column=<span class="string">"id"</span> property=<span class="string">"id"</span>/&gt;</span><br><span class="line">               &lt;result column=<span class="string">"last_name"</span> property=<span class="string">"lastName"</span>/&gt;</span><br><span class="line">               &lt;result column=<span class="string">"last_name"</span> property=<span class="string">"email"</span>/&gt;</span><br><span class="line">               &lt;result column=<span class="string">"gender"</span> property=<span class="string">"gender"</span>/&gt;</span><br><span class="line">           &lt;/case&gt;</span><br><span class="line">       &lt;/discriminator&gt;</span><br><span class="line">   &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Employee employee = mapper.getEmpByIdStep(<span class="number">3</span>);</span><br><span class="line">System.out.println(employee);</span><br><span class="line">System.out.println(employee.getDept());</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot常见报错总结</title>
    <url>/2020/ckbj29rel000lcsvf2nm002hk/</url>
    <content><![CDATA[<a id="more"></a>

<p>@[TOC](Spring Boot常见报错)</p>
<h1 id="Spring-Boot常见报错总结"><a href="#Spring-Boot常见报错总结" class="headerlink" title="Spring Boot常见报错总结"></a>Spring Boot常见报错总结</h1><h2 id="1-Valid没有效果"><a href="#1-Valid没有效果" class="headerlink" title="1. @Valid没有效果"></a>1. @Valid没有效果</h2><p>在配合使用@Valid和@Min注解时，发现没有起到效果。</p>
<p>pom.xml中添加依赖项：</p>
<pre><code>&lt;dependency&gt;
        &lt;groupId&gt;org.hibernate.validator&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;
    &lt;/dependency&gt;</code></pre><p>引入对应的类</p>
<pre><code>import javax.validation.Valid;
import javax.validation.constraints.Min;</code></pre><h2 id="2-findOne-报错"><a href="#2-findOne-报错" class="headerlink" title="2. findOne()报错"></a>2. findOne()报错</h2><p>spring boot 新版本的问题，现在findOne返回的是 Optional 对象。</p>
<p>如果传id可直接调用findById方法，若传对象则调用findOne方法</p>
<pre><code>girlRepository.findById(id).orElse(null);</code></pre>]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>spring boot java</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis（5）</title>
    <url>/2020/ckbj29reo000qcsvfayzncnjh/</url>
    <content><![CDATA[<a id="more"></a>

<p>@<a href="MyBatis（5）">TOC</a></p>
<h2 id="一、一级缓存（本地缓存）"><a href="#一、一级缓存（本地缓存）" class="headerlink" title="一、一级缓存（本地缓存）"></a>一、一级缓存（本地缓存）</h2><p><strong>1. 与数据库同一次会话期间，查询到的数据会放在本地缓存中<br>2. 以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库<br>3.  sqlSession级别的缓存，一直开启的 —— 实际上就是sqlSession级别的一个Map</strong></p>
<pre><code>一级缓存失效情况（发送多个sql语句）：
1. sqlSession不同
2. sqlSession相同，查询条件不同（当前一级缓存中没有这个数据）
3. sqlSession相同，两次查询之间执行了增删改操作（这次增删改操作可能对当前数据有影响）——因为设置了flushCache=&quot;true&quot;
4. sqlSession相同，手动清除了一级缓存 openSession.clearCache();</code></pre><h2 id="二、二级缓存（全局缓存）"><a href="#二、二级缓存（全局缓存）" class="headerlink" title="二、二级缓存（全局缓存）"></a>二、二级缓存（全局缓存）</h2><p><strong>1. 基于NameSpace级别的缓存 —— 一个NameSpace就对应一个二级缓存<br>2. 工作机制：<br>     *  1）一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中<br>     *  2）如果会话关闭，一级缓存的数据会被保存到二级缓存中；新的会话查询信息，就可以参照二级缓存中的内容<br>     *  3）sqlSession：<br>     *      (1) EmployeeMapper ==&gt; Employee<br>     *      (2) DepartmentMapper ==&gt; Department<br>     *    不同的NameSpace查出的数据会放在对应的缓存（map）中</strong></p>
<pre><code>使用步骤
 *  1. 开启全局二级缓存配置：&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;
 *  2. 在每个Mapper.xml中配置二级缓存
 *  3. POJO（每个JavaBean对象）需要实现`Serializable `序列化接口</code></pre><p>具体代码：</p>
<p>全局配置文件mybatis-config.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">       &lt;setting name=<span class="string">"cacheEnabled"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">   &lt;/settings&gt;</span><br></pre></td></tr></table></figure>
<p><code>cache</code>标签：二级缓存<br><code>eviction</code>属性：缓存的回收策略<br><code>flushInterval</code>属性：缓存刷新间隔<br><code>readOnly</code>属性：是否只读</p>
<pre><code>true：只读，所有从缓存中获取数据的操作都是只读操作，不会修改数据
                   为了加快获取速度，直接将数据在缓存中的引用交给用户
             —— 不安全，速度快
false：非只读，获取的数据可能被修改，mybatis会利用序列化和反序列化克隆一份新的数据给用户
             —— 安全，速度慢</code></pre><p><code>size</code>属性：缓存中存放多少个元素<br><code>type</code>属性：自定义缓存的全类名 —— 实现Cache接口即可（可以实现第三方缓存整合）</p>
<p>EmployeeMapper.xml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;cache eviction=<span class="string">"FIFO"</span> flushInterval=<span class="string">"60000"</span> readOnly=<span class="string">"false"</span> size=<span class="string">"1024"</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>Employee.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>==注意==<br>在MapperXml配置文件的<code>select</code>标签不能添加<code>useCache=&quot;true&quot; flushCache=&quot;true&quot;</code>设置，否则会刷新缓存</p>
<p>==查出的数据会默认先放在一级缓存中，只有关闭会话后，一级缓存中的数据才会转移到二级缓存中==</p>
<h2 id="三、和缓存相关的设置-属性："><a href="#三、和缓存相关的设置-属性：" class="headerlink" title="三、和缓存相关的设置/属性："></a>三、和缓存相关的设置/属性：</h2><pre><code>*  1. &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;
*      当设置成false时，二级缓存会被关闭，而一级缓存一直可用，不会被关闭
*  2. 每个select标签都有 useCache=&quot;true&quot; 设置
*      当设置成false时，二级缓存会被关闭，而一级缓存一直可用，不会被关闭
*  3. 增删改标签： flushCache=&quot;true&quot;，！！！每次执行完都会清除缓存！！！
*      当设置成true时，一级、二级缓存都会被清除
*  4. 查询标签： flushCache=&quot;false&quot;
*      当设置成true时，一级、二级缓存都会被清除
*  5. openSession.clearCache()：只是清除当前session的一级缓存
*  6. localCacheScope：本地缓存作用域（一级缓存）
*      （1）session：当前会话的所有数据保存在会话缓存中
*      （2）statement：可以禁用一级缓存</code></pre><h2 id="四、ehcache第三方缓存整合"><a href="#四、ehcache第三方缓存整合" class="headerlink" title="四、ehcache第三方缓存整合"></a>四、ehcache第三方缓存整合</h2><pre><code>步骤：
1. 导入第三方缓存包
2. 导入与第三方缓存整合的适配包
3. xxMapper.xml中定义自定义缓存 &lt;cache type=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;/&gt;</code></pre>]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC（1）</title>
    <url>/2020/ckbj29rep000scsvfa0dy8s53/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="SpringMVC（1）"><a href="#SpringMVC（1）" class="headerlink" title="SpringMVC（1）"></a>SpringMVC（1）</h1><h3 id="一、三层架构"><a href="#一、三层架构" class="headerlink" title="一、三层架构"></a>一、三层架构</h3><pre><code>表现层：Web层，用于和客户端进行数据交互，采用MVC设计模型，Controller（SpringMVC）
业务层：处理业务逻辑，Service（Spring）
持久层：操作数据库，Dao（MyBatis）</code></pre><h3 id="二、入门案例"><a href="#二、入门案例" class="headerlink" title="二、入门案例"></a>二、入门案例</h3><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol>
<li>在<code>pom.xml</code>中引入jar包</li>
<li>在<code>webapp/WEB-INF/web.xml</code>中配置核心控制器<code>DispatcherServlet</code></li>
<li>在<code>src/main/resources</code>下创建<code>SpringMVC.xml</code>配置文件</li>
<li>在<code>webapp下</code>创建首页页面<code>index.jsp</code></li>
<li>在<code>src/main/java/controller</code>下创建HelloController控制器类</li>
<li>在<code>webapp/WEB-INF/pages</code>下创建跳转成功页面<code>success.jsp</code></li>
</ol>
<h4 id="具体实现："><a href="#具体实现：" class="headerlink" title="具体实现："></a>具体实现：</h4><ol>
<li><p><code>web.xml</code>：配置前端控制器和解决中文乱码的过滤器</p>
<pre><code>使用前端控制器servlet来加载后续的SprigMVC的xml配置文件
==&gt; 开启注解扫描
==&gt; Controller类启动
==&gt; 页面发送请求，Controller类中的方法生效
==&gt; 跳转成功页面</code></pre></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置解决中文乱码的过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 前端控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="注意-：在前端控制器里要配置初始化参数contextConfigLocation，使得servlet启动时能够加载SpringMVC的xml配置文件"><a href="#注意-：在前端控制器里要配置初始化参数contextConfigLocation，使得servlet启动时能够加载SpringMVC的xml配置文件" class="headerlink" title="==注意==：在前端控制器里要配置初始化参数contextConfigLocation，使得servlet启动时能够加载SpringMVC的xml配置文件"></a>==注意==：在前端控制器里要配置初始化参数<code>contextConfigLocation</code>，使得servlet启动时能够加载SpringMVC的xml配置文件</h5><ol start="2">
<li><p><code>SpringMVC.xml</code></p>
<pre><code>- 开启注解扫描
- 配置视图解析器
- 开启SpringMVC框架注解的支持</code></pre><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.Lemon"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 视图解析器</span></span><br><span class="line"><span class="comment">       prefix：文件所在目录</span></span><br><span class="line"><span class="comment">       suffix：文件的后缀</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 开启SpringMVC框架注解的支持 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>index.jsp</code>：首页页面</p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;入门程序&lt;/h3&gt;</span><br><span class="line">	&lt;!-- 超链接 --&gt;</span><br><span class="line">	&lt;a href="hello"&gt;入门程序&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li><code>HelloController.java</code>：控制器类，通过配置xml文件开启注解扫描后，只需要在该类上加上<code>@Controller</code>注解，交给IOC容器管理即可</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入门案例：</span></span><br><span class="line"><span class="comment">     *  jsp页面发送请求到后台，调用sayHello方法，需要加上<span class="doctag">@RequestMapping</span>请求映射注解，并指定路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello SpringMVC"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>; <span class="comment">// 如果方法生效了，就应该要跳转到success.jsp页面</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li><p><code>sunccess.jsp</code>：成功页面</p>
<p> 当在首页点击超链接后，jsp页面发送请求到后端，</p>
<pre><code>由于超链接的`href`指向了`sayHello()`方法的`@RequestMapping`所指的路径，
所以，会调用sayHello()方法，方法生效执行成功`return &quot;success&quot;`，
那么就会跳转到`success.jsp`页面，
最终页面会显示`success.jsp`的“入门成功”，并且后台打印`sayHello()`方法的&quot;Hello SpringMVC&quot;。</code></pre><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;入门成功&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="三、请求参数的绑定"><a href="#三、请求参数的绑定" class="headerlink" title="三、请求参数的绑定"></a>三、请求参数的绑定</h3></li>
<li><p>提交表单的数据格式：<code>K=V</code>，中间用<code>&amp;</code>连接例如：<code>username=hehe&amp;password=123</code></p>
</li>
<li><p>SpringMVC参数绑定过程：把表单提交的请求参数，作为Controller控制器类中的方法的参数进行绑定，==要求表单的name必须和参数的名称相同==</p>
</li>
<li><p>支持的数据类型</p>
</li>
</ol>
<hr>
<h4 id="–-基本数据类型和字符串类型"><a href="#–-基本数据类型和字符串类型" class="headerlink" title="– 基本数据类型和字符串类型"></a>– 基本数据类型和字符串类型</h4><h5 id="具体代码："><a href="#具体代码：" class="headerlink" title="具体代码："></a>具体代码：</h5><p>首页<code>param.jsp</code>：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%-- （<span class="number">1</span>）基本数据类型和字符串类型   --%&gt;</span><br><span class="line">    &lt;a href="param/testParam?username=hehe&amp;password=123"&gt;请求参数的绑定&lt;/a&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p>控制器类<code>ParamController.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/param"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// （1）基本数据类型和字符串类型</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testParam"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testParam1</span><span class="params">(String username, String password)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了..."</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"用户名："</span> + username);</span><br><span class="line">        System.out.println(<span class="string">"密码："</span> + password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="要求：超链接的name（href的-username-hehe）必须和方法参数String-username相同"><a href="#要求：超链接的name（href的-username-hehe）必须和方法参数String-username相同" class="headerlink" title="要求：超链接的name（href的?username=hehe）必须和方法参数String username相同"></a>要求：超链接的name（<code>href</code>的<code>?username=hehe</code>）必须和方法参数<code>String username</code>相同</h5><h5 id="效果：SpringMVC会将页面请求参数赋值给控制器类方法的形参，在后台会打印页面输入的username和password的具体数据hehe和123，页面会跳转到success页面"><a href="#效果：SpringMVC会将页面请求参数赋值给控制器类方法的形参，在后台会打印页面输入的username和password的具体数据hehe和123，页面会跳转到success页面" class="headerlink" title="效果：SpringMVC会将页面请求参数赋值给控制器类方法的形参，在后台会打印页面输入的username和password的具体数据hehe和123，页面会跳转到success页面"></a>效果：SpringMVC会将页面请求参数赋值给控制器类方法的形参，在后台会打印页面输入的username和password的具体数据hehe和123，页面会跳转到success页面</h5><hr>
<h4 id="–-实体类类型JavaBean对象"><a href="#–-实体类类型JavaBean对象" class="headerlink" title="– 实体类类型JavaBean对象"></a>– 实体类类型JavaBean对象</h4><h5 id="具体代码：-1"><a href="#具体代码：-1" class="headerlink" title="具体代码："></a>具体代码：</h5><p><code>param.jsp</code>：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">      &lt;%-- （<span class="number">2</span>）实体类型JavaBean --%&gt;</span><br><span class="line">     &lt;form action=<span class="string">"param/saveAccount"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        密码：&lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"money"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.uname"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> name=<span class="string">"提交"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><code>ParamController.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/param"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// （2）实体类型JavaBean</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/saveAccount"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testParam2</span><span class="params">(Account account)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了..."</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(account);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实体类<code>Account.java</code>：==加上get，set，toString方法==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// （2）实体类型JavaBean</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实体类<code>User.java</code>：==加上get，set，toString方法==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义类型转换器</span></span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h5><ol>
<li>提交表单中的name（<code>name=&quot;username&quot;</code>）必须和实体类<code>Account</code>的属性名相同。</li>
<li>如果实体类中有引用类型属性（另一个JavaBean对象<code>User user</code>），那么可以在表单中使用<strong>对象.属性</strong><code>user.uname</code>调用引用类型属性的属性</li>
<li>当页面提交表单数据，会调用属性的set方法设置数据；方法生效时，传入JavaBean对象，就可以调用get方法获得数据</li>
</ol>
<hr>
<h4 id="–-集合数据类型（List，Map等）"><a href="#–-集合数据类型（List，Map等）" class="headerlink" title="– 集合数据类型（List，Map等）"></a>– 集合数据类型（List，Map等）</h4><h5 id="具体代码：-2"><a href="#具体代码：-2" class="headerlink" title="具体代码："></a>具体代码：</h5><p><code>param.jsp</code>：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">     &lt;%--  （<span class="number">3</span>）集合数据类型 --%&gt;</span><br><span class="line">     &lt;form action=<span class="string">"param/saveAccount"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> /&gt;&lt;br/&gt;</span><br><span class="line">        密码：&lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span> /&gt;&lt;br/&gt;</span><br><span class="line">        金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"money"</span> /&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">        用户姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"list[0].uname"</span> /&gt;&lt;br/&gt;</span><br><span class="line">        用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"list[0].age"</span> /&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">        用户姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"map['one'].uname"</span> /&gt;&lt;br/&gt;</span><br><span class="line">        用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"map['one'].age"</span> /&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span> /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p><code>ParamController.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/param"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// （2）实体类型JavaBean</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/saveAccount"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testParam2</span><span class="params">(Account account)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了..."</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(account);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实体类<code>Account.java</code>：==加上get，set，toString方法==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// （2）实体类型JavaBean</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// （3）集合数据类型（List，Map等）</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, User&gt; map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实体类<code>User.java</code>：==加上get，set，toString方法==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义类型转换器</span></span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="要求：-1"><a href="#要求：-1" class="headerlink" title="要求："></a>要求：</h5><ol>
<li>对于List类型，表单使用 <code>list[0].uname</code></li>
<li>对于Map类型，表单使用 <code>map[&#39;one&#39;].uname</code></li>
</ol>
<h3 id="四、自定义类型转换器"><a href="#四、自定义类型转换器" class="headerlink" title="四、自定义类型转换器"></a>四、自定义类型转换器</h3><pre><code>表单提交的都是字符串类型，就算后台定义Integer类型，数据也可以封装上
这说明，Spring框架会默认进行数据类型转换
但是，如果是自定义的类型，那么需要自定义类型转换器</code></pre><h5 id="步骤：-1"><a href="#步骤：-1" class="headerlink" title="步骤："></a>步骤：</h5><pre><code>* 1.定义一个类型转换的方法，并实现Convert接口
*      implements Converter&lt;S, T&gt;：S是String类型，T是自定义类型
* 2.在SpringMVC.xml配置文件中配置自定义类型转换器
*   同时，要把自定义的类型转换的方法注册进来，需要在SpringMVC框架注解中注册自定义类型转换器
*   ConversionServiceFactoryBean
*      &lt;bean class=&quot;com.Lemon.utils.StringToDateConverter&quot;/&gt;
*      &lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot;/&gt;</code></pre><h5 id="具体代码：-3"><a href="#具体代码：-3" class="headerlink" title="具体代码："></a>具体代码：</h5><pre><code>自定义一个日期类型的转换器
因为SpringMVC默认只能将yyyy/MM/dd的字符串转换成日期
现在要求能将yyyy-MM-dd的字符串转换成日期。</code></pre><p><code>StringToDateConverter.java</code>：把字符串转换成日期的自定义类型转换器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToDateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断</span></span><br><span class="line">        <span class="keyword">if</span> (source == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"请您传入数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        <span class="comment">// 把字符串转换成日期</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> df.parse(source);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数据类型转换出现错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>springmvc.xml</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置自定义类型转换器</span><br><span class="line">    <span class="number">1</span>. 需要把自定义的类型转换的方法注册进来</span><br><span class="line">    <span class="number">2</span>. 需要在SpringMVC框架注解中注册自定义类型转换器</span><br><span class="line">--&gt;</span><br><span class="line">&lt;bean id=<span class="string">"conversionService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"converters"</span>&gt;</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.Lemon.utils.StringToDateConverter"</span>/&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 开启SpringMVC框架注解的支持 --&gt;</span><br><span class="line">&lt;mvc:annotation-driven conversion-service=<span class="string">"conversionService"</span>/&gt;</span><br></pre></td></tr></table></figure>

<p><code>ParamController.java</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/param"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamController</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 自定义类型转换器</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/saveUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testParam3</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了..."</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="五、获取原生的Servlet的API对象"><a href="#五、获取原生的Servlet的API对象" class="headerlink" title="五、获取原生的Servlet的API对象"></a>五、获取原生的Servlet的API对象</h3><p>只需要在Controller控制器类的方法的形参列表中定义<code>HttpServletRequest</code>和<code>HttpServletResponse</code>对象即可使用</p>
<p><code>ParamController.java</code>：</p>
<pre><code class="java"><span class="meta">@Controller</span>
<span class="meta">@RequestMapping</span>(<span class="string">"/param"</span>)
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamController</span> </span>{
    <span class="comment">// 获取原生的Servlet的API对象</span>
    <span class="meta">@RequestMapping</span>(<span class="string">"/testServlet"</span>)
    <span class="function"><span class="keyword">public</span> String <span class="title">testServlet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>{
        System.out.println(<span class="string">"执行了..."</span>);

        System.out.println(request);

        HttpSession session = request.getSession();
        System.out.println(session);

        ServletContext servletContext = session.getServletContext();
        System.out.println(servletContext);

        System.out.println(response);

        <span class="keyword">return</span> <span class="string">"success"</span>;
    }
}</code></pre>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC（2）</title>
    <url>/2020/ckbj29res000xcsvfg6h0ahf9/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="SpringMVC（2）"><a href="#SpringMVC（2）" class="headerlink" title="SpringMVC（2）"></a>SpringMVC（2）</h1><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h3 id="一、-RequestMapping"><a href="#一、-RequestMapping" class="headerlink" title="一、@RequestMapping"></a>一、<code>@RequestMapping</code></h3><ol>
<li><p>作用：建立请求URL和处理方法之间的对应关系</p>
</li>
<li><p>可以作用在类/方法上<br>（1）作用在类上：一级访问目录<br>（2）作用在方法上：二级访问目录</p>
</li>
<li><p>属性：<br>（1）<code>value/path</code>：指定请求的URL，当只有一个属性时，可以不写<br>（2）<code>method</code>：指定方法的请求方式 get，post，put，。。。<br>使用方法：<code>method = {RequestMethod.POST, ...}</code><br>==在浏览器中点击超链接，是GET方法==<br>（3）<code>params</code>：限制请求参数的条件</p>
<pre><code>如：params = {&quot;username&quot;}
要求链接必须传 href=&quot;user/testRequestMapping?username=hehe&quot;

如：params = {&quot;username=haha&quot;}
 要求链接必须传 ?username=haha，而现在jsp里传的是 hehe，所以访问不到
 可以自己将链接改成 user/testRequestMapping?username=haha</code></pre><p> （4）<code>headers</code>：发送的请求中必须包含该请求头</p>
<pre><code>如：headers = {&quot;Accept&quot;}</code></pre><h3 id="二、-RequestParam"><a href="#二、-RequestParam" class="headerlink" title="二、@RequestParam"></a>二、<code>@RequestParam</code></h3></li>
<li><p>作用：将页面请求中指定名称的参数传递给后台控制器中的形参赋值</p>
</li>
<li><p>通常用于前后端变量名不同时，只需要使用这个注解，并加上前端变量名，就可以赋值给后端的变量</p>
</li>
<li><p>属性：<br>（1）<code>value</code>：前端页面请求中参数的名称<br>（2）<code>required</code>：前端页面请求中是否要提供此参数，默认是true，必须提供</p>
<pre><code>如果页面发送请求是anno/testRequestParam?uname=哈哈&quot;，只要不是value指定的名称，都不行</code></pre></li>
<li><p>具体代码：</p>
</li>
</ol>
<p><code>anno.jsp</code>页面：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--  <span class="meta">@RequestParam</span>  --%&gt;</span><br><span class="line">   &lt;a href="anno/testRequestParam?name=哈哈"&gt;RequestParam&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><code>AnnoController</code>类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/anno"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestParam</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testRequestParam"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestParam</span><span class="params">(@RequestParam(name = <span class="string">"name"</span>)</span> String username)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了..."</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(username);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>==注意==：<br>可以看到此时jsp页面配置的url中是<code>name=哈哈</code>，而方法中形参是<code>String username</code>，在<strong>参数绑定</strong>中，本来是要求形参名称必须和url中请求参数的名称相同的。</p>
<p>但是现在，可以使用<code>@RequestParam(name = &quot;name&quot;)</code>指定页面请求中的参数名，就可以将页面请求中指定名称的参数传递给后台控制器中的形参赋值</p>
<h3 id="三、-RequestBody"><a href="#三、-RequestBody" class="headerlink" title="三、@RequestBody"></a>三、<code>@RequestBody</code></h3><ol>
<li>作用：取请求体（页面表单）的内容</li>
<li>注意：GET方法（超链接）不可以使用，主要针对表单POST</li>
<li>具体代码：</li>
</ol>
<p><code>anno.jsp</code>页面：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--  <span class="meta">@RequestBody</span>  --%&gt;</span><br><span class="line">   &lt;form action=<span class="string">"anno/testRequestBody"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">       用户姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">       用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">       &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">   &lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p><code>AnnoController</code>类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/anno"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestBody</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testRequestBody"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestBody</span><span class="params">(@RequestBody String body)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了..."</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(body);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li><p>效果：在后台会打印表单中输入的数据 <code>username=xxx&amp;age=xx</code></p>
<h3 id="四、-PathVariable"><a href="#四、-PathVariable" class="headerlink" title="四、@PathVariable"></a>四、<code>@PathVariable</code></h3></li>
<li><p>作用：获取请求中占位符的值</p>
</li>
<li><p>属性：<code>name</code>：必须和占位符中的名称一样</p>
</li>
<li><p>Restful风格：</p>
<pre><code>将请求地址统一，根据请求的不同方式（GET,PUT,POST...)来调用不同的方法
如果有两个相同的地址和请求方式，可以请求后面添加 /{ }，来传递带占位符的请求</code></pre></li>
<li><p>具体代码：</p>
</li>
</ol>
<p><code>anno.jsp</code>页面：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--  <span class="meta">@PathVariable</span>--%&gt;</span><br><span class="line">   &lt;a href="anno/testPathVariable/10"&gt;PathVariable&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><code>AnnoController</code>类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/anno"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@PathVariable</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testPathVariable/&#123;sid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testPathVariable</span><span class="params">(@PathVariable(name = <span class="string">"sid"</span>)</span> String id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了..."</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>要求：<code>@RequestMapping</code>中带上<code>{sid}</code>占位符，要求<code>@PathVariable(name = &quot;sid&quot;)</code>中的name必须和占位符名称相同<h3 id="五、-RequestHeader"><a href="#五、-RequestHeader" class="headerlink" title="五、@RequestHeader"></a>五、<code>@RequestHeader</code></h3></li>
<li>作用：获取请求头的值</li>
<li>属性：<code>value</code>：请求头的名称</li>
<li>具体代码：</li>
</ol>
<p><code>anno.jsp</code>页面：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--  <span class="meta">@RequestHeader</span>--%&gt;</span><br><span class="line">   &lt;a href="anno/testRequestHeader"&gt;RequestHeader&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><code>AnnoController</code>类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/anno"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestHeader</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testRequestHeader"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestHeader</span><span class="params">(@RequestHeader(value = <span class="string">"Accept"</span>)</span> String header)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了..."</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(header);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="六、-CookieValue"><a href="#六、-CookieValue" class="headerlink" title="六、@CookieValue"></a>六、<code>@CookieValue</code></h3><ol>
<li>作用：获取指定cookie的名称的值</li>
<li>属性：<code>value</code>：cookie对的名称</li>
<li>具体代码：</li>
</ol>
<p><code>anno.jsp</code>页面：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--  <span class="meta">@CookieValue</span>--%&gt;</span><br><span class="line">   &lt;a href="anno/testCookieValue"&gt;CookieValue&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><code>AnnoController</code>类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/anno"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@CookieValue</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testRequestHeader"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testCookieValue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testCookieValue</span><span class="params">(@CookieValue(value = <span class="string">"JSESSIONID"</span>)</span> String cookieValue)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了..."</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(cookieValue);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="七、-ModelAttribute"><a href="#七、-ModelAttribute" class="headerlink" title="七、@ModelAttribute"></a>七、<code>@ModelAttribute</code></h3><ol>
<li><p>作用：<br>（1）作用在方法上：</p>
<pre><code>该方法会在控制器方法testModelAttribute之前先执行
方法带返回值</code></pre><p> （2）作用在参数上（需要同时作用在方法上）：</p>
<pre><code>获取map中指定key的数据赋值给当前参数
方法不带返回值</code></pre></li>
<li><p>应用：当提交表单数据不完整时，可以保证没有提交的字段仍然使用数据库原来的数据，而已提交的字段可以覆盖数据库原来的数据</p>
</li>
<li><p>具体代码：</p>
</li>
</ol>
<p><code>anno.jsp</code>页面：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--  <span class="meta">@ModelAttribute</span>--%&gt;</span><br><span class="line">   &lt;form action=<span class="string">"anno/testModelAttribute"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">       用户姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"uname"</span>/&gt;&lt;br/&gt;</span><br><span class="line">       用户年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">       &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">   &lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p><code>AnnoController</code>类：<br>（1）作用在方法上，方法带返回值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/anno"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 带返回值的方法</span></span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">showUser</span><span class="params">(String uname)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"showUser执行了..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过用户名查询数据库（模拟）</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUname(uname);</span><br><span class="line">        user.setAge(<span class="number">0</span>);</span><br><span class="line">        user.setDate(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ModelAttribute</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/testModelAttribute"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testModelAttribute执行了..."</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>首先在数据库中根据传入的<code>uname</code>参数创建了一个User对象，并且设置了初始值<code>age</code>和<code>date</code>，当表单仅提交了<code>uname</code>和<code>age</code>时，新的<code>age</code>会覆盖掉数据库中的初始值，而<code>date</code>没有提交过，所以会使用数据库中的初始值。</li>
<li><code>showUser()</code>方法创建完User对象后返回该对象给控制器方法<code>testModelAttribute(User user)</code>的形参User赋值。</li>
<li>效果：页面输入<code>uname=呵呵，age=20</code>，后台打印<code>User{uname=&#39;呵呵&#39;, age=20, date=Thu Jun 11 15:00:03 CST 2020}</code>。可以看到<code>age</code>不是初始值0，且date使用了初始值</li>
</ul>
<hr>
<p>（2）作用在参数上，方法不带返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/anno"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不带返回值的方法</span></span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUser1</span><span class="params">(String uname, Map&lt;String, User&gt; map)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"showUser执行了..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过用户名查询数据库（模拟）</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUname(uname);</span><br><span class="line">        user.setAge(<span class="number">0</span>);</span><br><span class="line">        user.setDate(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">"abc"</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ModelAttribute</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/testModelAttribute"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(@ModelAttribute(<span class="string">"abc"</span>)</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testModelAttribute执行了..."</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>首先，方法的形参加上map对象，<code>key：String，value：User</code>，用于存储User对象</p>
</li>
<li><p>其次，user对象查询完后，放到map中</p>
</li>
<li><p>那么，控制器方法可以在形参前加上<code>@ModelAttribute(&quot;key&quot;)</code>，括号内加上map中指定的key，可以将已经存储的user对象赋值给形参使用</p>
</li>
<li><p>效果：页面输入<code>uname=呵呵，age=20</code>，后台先打印<code>showUser执行了...</code>，然后打印<code>User{uname=&#39;呵呵&#39;, age=20, date=Thu Jun 11 15:00:03 CST 2020}</code>。可以看到<code>age</code>不是初始值0，且date使用了初始值</p>
</li>
<li><p><strong>强调</strong>：==加上<code>@ModelAttribute</code>的方法会在控制器方法之前先执行==</p>
<h3 id="八、-SessionAttributes"><a href="#八、-SessionAttributes" class="headerlink" title="八、@SessionAttributes"></a>八、<code>@SessionAttributes</code></h3><ol>
<li><p>作用：用于控制器方法之间的参数共享</p>
</li>
<li><p>步骤：</p>
<p>  首先需要在方法参数定义Model对象，使用model.addAttribute()方法，将参数存到request域对象中<br>  然后@SessionAttributes(value = {“msg”})作用在类上，会将 request域对象中的msg=妹妹 存入到Session域对象中<br>  那么，其他方法可以从Session域对象中取出对应的值，也可以将Session域对象清除</p>
</li>
</ol>
</li>
</ul>
<ol start="3">
<li>具体代码：</li>
</ol>
<p><code>anno.jsp</code>页面：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--  <span class="meta">@SessionAttributes</span>--%&gt;</span><br><span class="line">  &lt;a href="anno/testSessionAttributes"&gt;SessionAttributes&lt;/a&gt;</span><br><span class="line">   &lt;br/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;a href="anno/getSessionAttributes"&gt;getSessionAttributes&lt;/a&gt;</span><br><span class="line">   &lt;br/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;a href="anno/deleteSessionAttributes"&gt;deleteSessionAttributes&lt;/a&gt;</span><br><span class="line">   &lt;br/&gt;</span><br></pre></td></tr></table></figure>
<p><code>AnnoController</code>类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/anno"</span>)</span><br><span class="line"><span class="meta">@SessionAttributes</span>(value = &#123;<span class="string">"msg"</span>&#125;) <span class="comment">// 把msg=妹妹存入到Session域对象中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@SessionAttributes</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testSessionAttributes"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSessionAttributes</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SessionAttributes执行了..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 底层会存储到request域对象中</span></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"妹妹"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从Session域对象中取值</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getSessionAttributes"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSessionAttributes</span><span class="params">(ModelMap model)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"getSessionAttributes执行了..."</span>);</span><br><span class="line"></span><br><span class="line">        String msg = (String) model.get(<span class="string">"msg"</span>);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清除Session域对象</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/deleteSessionAttributes"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteSessionAttributes</span><span class="params">(SessionStatus status)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"getSessionAttributes执行了..."</span>);</span><br><span class="line"></span><br><span class="line">        status.setComplete();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>success.jsp</code>页面：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;入门成功&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">    $&#123; requestScope.msg &#125;</span><br><span class="line"></span><br><span class="line">    $&#123;sessionScope&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>==注意：==</p>
<ol>
<li><code>@SessionAttributes(value = {&quot;msg&quot;})</code>需要加在==类==上</li>
<li><code>testSessionAttributes</code>方法中使用<code>model.addAttribute(&quot;msg&quot;, &quot;妹妹&quot;)</code>，底层会存储到<code>request域对象</code>中</li>
<li><code>@SessionAttributes</code>会把<code>msg=妹妹</code>存入到<code>Session域对象</code>中</li>
<li>此时其他方法可以从<code>Session域对象</code>中取出对应的值，也可以将<code>Session域对象</code>清除</li>
<li>可以在跳转成功<code>success.jsp</code>页面上，使用<code>${ requestScope.msg }</code>或者<code>${sessionScope}</code>获得msg内容。</li>
</ol>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC（3）</title>
    <url>/2020/ckbj29reu0010csvf3iqxci1n/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="SpringMVC（3）"><a href="#SpringMVC（3）" class="headerlink" title="SpringMVC（3）"></a>SpringMVC（3）</h1><h2 id="响应数据和结果视图"><a href="#响应数据和结果视图" class="headerlink" title="响应数据和结果视图"></a>响应数据和结果视图</h2><h3 id="一、返回值类型分类"><a href="#一、返回值类型分类" class="headerlink" title="一、返回值类型分类"></a>一、返回值类型分类</h3><h5 id="1-返回字符串："><a href="#1-返回字符串：" class="headerlink" title="1. 返回字符串："></a>1. 返回字符串：</h5><p>当方法生效，返回<code>&quot;success&quot;</code>，就会在<code>WEB-INF/pages</code>下找到对应的<code>success.jsp</code>，从而跳转到该页面</p>
<pre><code>可以将从数据库查询到的对象存储到Request域对象中，
那么success页面可以根据域对象中的值获得user对象，
进而直接在页面输出user对象的属性。</code></pre><p><strong>具体代码：</strong><br><code>response.jsp</code>页面：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="user/testString"&gt;testString&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><code>UserController</code>控制器类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testString"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testString</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testString执行了"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟从数据库中查询出User对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"妹妹"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123"</span>);</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">// 将数据存储到request域对象</span></span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>success.jsp</code>跳转成功页面：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;执行成功&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%-- （<span class="number">1</span>）返回字符串  --%&gt;</span><br><span class="line">    $&#123;user.username&#125;</span><br><span class="line">    $&#123;user.password&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>==注意==：<br>在控制器方法中使用<code>Model</code>将查询的<code>User</code>对象存储到<code>request域对象</code>中<br>那么在<code>success.jsp</code>跳转成功页面可以获得该<code>request域对象</code>的值</p>
<h5 id="2-返回void："><a href="#2-返回void：" class="headerlink" title="2. 返回void："></a>2. 返回void：</h5><p>由于没有返回值，默认跳转到请求路径的页面 <code>testVoid.jsp</code>，而<code>WEB-INF/pages</code>下并没有对应的jsp页面，所以会报错。</p>
<p><strong>解决办法：</strong></p>
<ol>
<li>请求转发，手动跳转到success页面</li>
<li>重定向</li>
<li>直接进行响应</li>
</ol>
<p><strong>具体代码：</strong><br><code>response.jsp</code>页面：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="user/testVoid"&gt;testVoid&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><code>UserController</code>控制器类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testVoid"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVoid</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testVoid执行了"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1 请求转发</span></span><br><span class="line"><span class="comment">//        request.getRequestDispatcher("/WEB-INF/pages/success.jsp").forward(request, response);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2 重定向</span></span><br><span class="line"><span class="comment">//        response.sendRedirect(request.getContextPath()+"/index.jsp");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3 直接进行响应</span></span><br><span class="line">        <span class="comment">// 解决中文乱码</span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        response.getWriter().println(<span class="string">"你好"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>==注意==：</p>
<ol>
<li>请求转发是<strong>一次请求</strong>，此时<strong>不会调用视图解析器，需要写完整的页面路径</strong></li>
<li>重定向是<strong>两次请求，重新发送了请求</strong>，<strong>不能直接请求到WEB-INF里面的页面</strong></li>
</ol>
<h5 id="3-返回ModelAndView对象："><a href="#3-返回ModelAndView对象：" class="headerlink" title="3. 返回ModelAndView对象："></a>3. 返回<code>ModelAndView</code>对象：</h5><p>（1）<code>ModelAndView.addObject(&quot;user&quot;, user)</code>：把user对象存储到mv对象中，底层也会把user对象存储到<code>request域对象</code>中<br>（2）<code>ModelAndView.setViewName(&quot;success&quot;)</code>：跳转到哪个页面</p>
<p><strong>具体代码：</strong><br><code>response.jsp</code>页面：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="user/testModelAndView"&gt;testModelAndView&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><code>UserController</code>控制器类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testModelAndView"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testModelAndView</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testModelAndView执行了"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ModelAndView对象</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟从数据库中查询出User对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"妹妹"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"456"</span>);</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        <span class="comment">// 1. 把user对象存储到mv对象中，底层也会把user对象存储到request域对象中</span></span><br><span class="line">        mv.addObject(<span class="string">"user"</span>, user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 跳转到哪个页面</span></span><br><span class="line">        mv.setViewName(<span class="string">"success"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>success.jsp</code>跳转成功页面：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;执行成功&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">    $&#123;user.username&#125;</span><br><span class="line">    $&#123;user.password&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h3 id="二、SpringMVC提供的转发和重定向"><a href="#二、SpringMVC提供的转发和重定向" class="headerlink" title="二、SpringMVC提供的转发和重定向"></a>二、SpringMVC提供的转发和重定向</h3><p>此时，视图解析器不可用，必须自己写完整的请求路径</p>
<p>（1）转发：<code>forward</code>：完整的页面路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">"forward:/WEB-INF/pages/success.jsp"</span></span><br></pre></td></tr></table></figure>

<p>（2）重定向：<code>redirect</code>：只能加<code>webapp</code>根目录下的jsp页面，访问不到<code>WEB-INF</code>文件夹里的页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br></pre></td></tr></table></figure>

<p><strong>具体代码：</strong><br><code>response.jsp</code>页面：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="user/testForwardOrRedirect"&gt;testForwardOrRedirect&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><code>UserController</code>控制器类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/testForwardOrRedirect"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testForwardOrRedirect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testForwardOrRedirect执行了"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求的转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/WEB-INF/pages/success.jsp"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重定向</span></span><br><span class="line"><span class="comment">//        return "redirect:/index.jsp";</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三、ResponseBody响应json数据"><a href="#三、ResponseBody响应json数据" class="headerlink" title="三、ResponseBody响应json数据"></a>三、ResponseBody响应json数据</h3><ol>
<li><p>模拟异步请求响应的步骤：<br>（1）从前端jsp中获得请求体（前端jsp中的data数据）<br>（2）@RequestBody：将前端请求体的json字符串转换成JavaBean对象<br>（3）然后查询数据库操作等<br>（4）@ResponseBody：将JavaBean对象转换成json字符串</p>
</li>
<li><p>效果：<br>（1）页面：返回数据库操作后的结果 “haha”,”123”,40<br>（2）后台：返回jsp中data的值 “hehe”,”123”,30</p>
</li>
<li><p>注意：<br>由于在<code>web.xml</code>中配置了<code>DispatcherServlet</code>前端控制器，会拦截所有的资源，而通常静态资源是不需要拦截的，所以在<code>springmvc.xml</code>中告诉前端控制器，哪些静态资源不拦截</p>
</li>
</ol>
<p><code>springmvc.xml</code>：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;mvc:resources mapping=<span class="string">"/css/**"</span> location=<span class="string">"/css/"</span>/&gt; &lt;!-- 样式 --&gt;</span><br><span class="line">&lt;mvc:resources mapping=<span class="string">"/images/**"</span> location=<span class="string">"/images/"</span>/&gt; &lt;!-- 图片 --&gt;</span><br><span class="line">&lt;mvc:resources mapping=<span class="string">"/js/**"</span> location=<span class="string">"/js/"</span>/&gt; &lt;!-- javascript --&gt;</span><br></pre></td></tr></table></figure>
<p><code>response.jsp</code>页面：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%--   ResponseBody响应json数据  --%&gt;</span><br><span class="line">    &lt;script src="js/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 页面加载，绑定单击事件</span></span><br><span class="line">        $(function () &#123;</span><br><span class="line">            $(<span class="string">"#btn"</span>).click(function () &#123;</span><br><span class="line">                <span class="comment">// alert("hello btn");</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 发送ajax请求</span></span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    <span class="comment">// 编写json格式，设置属性和值</span></span><br><span class="line">                    url:<span class="string">"user/testAjax"</span>,</span><br><span class="line">                    contentType:<span class="string">"application/json;charset=UTF-8"</span>,</span><br><span class="line">                    data:<span class="string">'&#123;"username":"hehe","password":"123","age":"30"&#125;'</span>,</span><br><span class="line">                    dataType:<span class="string">"json"</span>,</span><br><span class="line">                    type:<span class="string">"post"</span>,</span><br><span class="line">                    success:function (data) &#123;</span><br><span class="line">                        <span class="comment">// data：服务器端响应的json数据，进行解析</span></span><br><span class="line">                        alert(data);</span><br><span class="line">                        alert(data.username);</span><br><span class="line">                        alert(data.password);</span><br><span class="line">                        alert(data.age);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button id="btn"&gt;发送ajax的请求&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><code>UserController</code>控制器类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/testAjax"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">User <span class="title">testAjax</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testAjax执行了"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 客户端发送ajax的请求，传递的是json字符串</span></span><br><span class="line">        <span class="comment">// 只要jsp中data的key和JavaBean对象的属性名相同，那么后端自动把json字符串封装到user对象中</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 做响应，模拟查询数据库</span></span><br><span class="line">        user.setUsername(<span class="string">"haha"</span>);</span><br><span class="line">        user.setAge(<span class="number">40</span>);</span><br><span class="line">        <span class="comment">// 做响应，返回给前端，使用@ResponseBody注解将JavaBean对象转换成json字符串</span></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC（4）</title>
    <url>/2020/ckbj29rew0014csvfbdhccyvb/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="SpringMVC（4）"><a href="#SpringMVC（4）" class="headerlink" title="SpringMVC（4）"></a>SpringMVC（4）</h1><h2 id="SpringMVC实现文件上传"><a href="#SpringMVC实现文件上传" class="headerlink" title="SpringMVC实现文件上传"></a>SpringMVC实现文件上传</h2><h3 id="一、传统方式的文件上传"><a href="#一、传统方式的文件上传" class="headerlink" title="一、传统方式的文件上传"></a>一、传统方式的文件上传</h3><ol>
<li>在<code>pom.xml</code>中引入<code>commons-fileupload</code>和<code>commons-io</code>jar包：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>文件上传的<code>index.jsp</code>页面：<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 传统方式的文件上传 --&gt;</span><br><span class="line">   &lt;form action=<span class="string">"user/fileUpload1"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">       选择文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span>/&gt;&lt;br/&gt;</span><br><span class="line">       &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>&gt;</span><br><span class="line">   &lt;/form&gt;</span><br></pre></td></tr></table></figure></li>
<li>文件上传的<code>UserController</code>控制器类：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传统方式的文件上传</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/fileUpload1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload1</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"文件上传。。。"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用fileupload组件完成文件上传</span></span><br><span class="line">        <span class="comment">// 上传的位置</span></span><br><span class="line">        String path = request.getSession().getServletContext().getRealPath(<span class="string">"/uploads/"</span>);</span><br><span class="line">        <span class="comment">// 判断该路径表示的文件夹是否存在</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            <span class="comment">// 创建该文件夹</span></span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析request对象，获取上传文件项</span></span><br><span class="line">        DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">        ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">        <span class="comment">// 解析request</span></span><br><span class="line">        List&lt;FileItem&gt; items = upload.parseRequest(request);</span><br><span class="line">        <span class="comment">// 遍历items文件项</span></span><br><span class="line">        <span class="keyword">for</span> (FileItem item : items) &#123;</span><br><span class="line">            <span class="comment">// 进行判断，当前item对象是否是上传文件项</span></span><br><span class="line">            <span class="keyword">if</span> (item.isFormField()) &#123; <span class="comment">// 说明是一个普通的表单项</span></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 说明是一个上传文件项</span></span><br><span class="line">                <span class="comment">// 获取上传文件的名称</span></span><br><span class="line">                String filename = item.getName();</span><br><span class="line">                <span class="comment">// 把文件的名称设置成唯一值，uuid</span></span><br><span class="line">                String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">                filename = uuid + <span class="string">"_"</span> + filename;</span><br><span class="line">                <span class="comment">// 完成文件上传</span></span><br><span class="line">                item.write(<span class="keyword">new</span> File(path, filename));</span><br><span class="line">                <span class="comment">// 删除临时文件</span></span><br><span class="line">                item.delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>==弊端==：需要自己解析<code>request对象</code>，获取上传文件项 —— 步骤繁琐</p>
<h3 id="二、SpringMVC的文件上传"><a href="#二、SpringMVC的文件上传" class="headerlink" title="二、SpringMVC的文件上传"></a>二、SpringMVC的文件上传</h3><p><code>MultipartFile</code>：表示上传的文件对象，其名称必须和表单里<code>name=&quot;upload&quot;</code>名称相同<br><code>CommonsMultipartResolver</code>：文件解析器，只要配置了文件解析器，方法中就不需要自己解析文件了</p>
<p>文件上传的<code>index.jsp</code>页面：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- SpringMVC的文件上传 --&gt;</span><br><span class="line">   &lt;form action=<span class="string">"user/fileUpload2"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">       选择文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span>/&gt;&lt;br/&gt;</span><br><span class="line">       &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p>文件上传的<code>UserController</code>控制器类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpringMVC的文件上传</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/fileUpload2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload2</span><span class="params">(HttpServletRequest request, MultipartFile upload)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringMVC文件上传。。。"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用fileupload组件完成文件上传</span></span><br><span class="line">        <span class="comment">// 上传的位置</span></span><br><span class="line">        String path = request.getSession().getServletContext().getRealPath(<span class="string">"/uploads/"</span>);</span><br><span class="line">        <span class="comment">// 判断该路径表示的文件夹是否存在</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            <span class="comment">// 创建该文件夹</span></span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取上传文件的名称</span></span><br><span class="line">        String filename = upload.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 把文件的名称设置成唯一值，uuid</span></span><br><span class="line">        String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        filename = uuid + <span class="string">"_"</span> + filename;</span><br><span class="line">        <span class="comment">// 完成文件上传</span></span><br><span class="line">        upload.transferTo(<span class="keyword">new</span> File(path, filename));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>==注意==：<br>（1）可以使用<code>UUID</code>把文件的名称设置成唯一值<br>（2）配置文件解析器对象<code>CommonsMultipartResolver</code>时，<code>id=&quot;multipartResolver&quot;</code> 不能改变，是固定写法。</p>
<h3 id="三、跨服务器的文件上传"><a href="#三、跨服务器的文件上传" class="headerlink" title="三、跨服务器的文件上传"></a>三、跨服务器的文件上传</h3><p><code>Client</code>：客户端对象<br><code>Client.resource()</code>：用于和图片服务器进行连接<br><code>webResource.put()</code>：用于上传文件</p>
<p>文件上传的<code>index.jsp</code>页面：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--  跨服务器的文件上传 --&gt;</span><br><span class="line">   &lt;form action=<span class="string">"user/fileUpload3"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">       选择文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span>/&gt;&lt;br/&gt;</span><br><span class="line">       &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p>文件上传的<code>UserController</code>控制器类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跨服务器的文件上传</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/fileUpload3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload3</span><span class="params">(MultipartFile upload)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"跨服务器文件上传。。。"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义上传文件服务器的路径：最后要有一个/</span></span><br><span class="line">        String path = <span class="string">"http://localhost:9090/uploads/"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取上传文件的名称</span></span><br><span class="line">        String filename = upload.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 把文件的名称设置成唯一值，uuid</span></span><br><span class="line">        String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        filename = uuid + <span class="string">"_"</span> + filename;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 完成文件上传，跨服务器上传</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建客户端的对象</span></span><br><span class="line">        Client client = Client.create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 和图片服务器进行连接</span></span><br><span class="line">        WebResource webResource = client.resource(path + filename);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上传文件</span></span><br><span class="line">        webResource.put(upload.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>==注意==：<br>（1）这里创建了两个local本地Tomcat服务器，一个端口号为8080，另一个端口号为9090<br>（2）定义上传文件服务器的路径：最后要有一个<code>/</code>，否则路径不对</p>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC（5）</title>
    <url>/2020/ckbj29rex0017csvfegttasi4/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="SpringMVC（5）"><a href="#SpringMVC（5）" class="headerlink" title="SpringMVC（5）"></a>SpringMVC（5）</h1><h2 id="SpringMVC的异常处理"><a href="#SpringMVC的异常处理" class="headerlink" title="SpringMVC的异常处理"></a>SpringMVC的异常处理</h2><h3 id="异常处理流程："><a href="#异常处理流程：" class="headerlink" title="异常处理流程："></a>异常处理流程：</h3><pre><code>dao ==&gt; service ==&gt; web ==&gt; 前端控制器 ==&gt; 页面
如果不处理异常，那么直接会将异常抛到页面上</code></pre><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>在前端控制器中配置异常处理器，进行异常处理</p>
<p>（1）编写自定义异常类，做提示信息的<br>（2）编写异常处理器<br>（3）配置异常处理器，用于跳转异常页面</p>
<h3 id="具体代码："><a href="#具体代码：" class="headerlink" title="具体代码："></a>具体代码：</h3><p><code>index.jsp</code>首页：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="user/testException"&gt;testException&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><code>SysException.java</code>自定义的异常类：系统异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储提示信息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SysException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>SysExceptionResolver.java</code>异常处理器类：需要实现<code>HandlerExceptionResolver</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到异常对象</span></span><br><span class="line">        SysException e = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> SysException)&#123;</span><br><span class="line">            e = (SysException) ex;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            e = <span class="keyword">new</span> SysException(<span class="string">"系统正在维护"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ModelAndView对象</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"errorMsg"</span>, e.getMessage());</span><br><span class="line">        mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>springmvc.xml</code>：配置异常处理器，用于跳转异常页面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sysExceptionResolver"</span> <span class="attr">class</span>=<span class="string">"com.Lemon.exception.SysExceptionResolver"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>UserController</code>控制器类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpringMVC的异常处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testException"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testException</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testException执行了..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 打印异常信息</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 抛出自定义异常信息</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SysException(<span class="string">"查询所有用户出现错误了..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>error.jsp</code>页面：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    $&#123;errorMsg&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>由于在异常处理器类<code>SysExceptionResolver</code>中创建<code>ModelAndView</code>对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">mv.addObject(<span class="string">"errorMsg"</span>, e.getMessage());</span><br><span class="line">mv.setViewName(<span class="string">"error"</span>);</span><br></pre></td></tr></table></figure>

<p>当有异常时，SpringMVC会将异常捕获，并把异常存储到<code>ModelAndView</code>对象中（<code>mv.addObject(&quot;errorMsg&quot;, e.getMessage());</code>），同时设置了跳转的视图页面（<code>mv.setViewName(&quot;error&quot;);</code>）。</p>
<p>因此出现异常，不会跳转到<code>success.jsp</code>页面，而是跳转到<code>error.jsp</code>页面。</p>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC（6）</title>
    <url>/2020/ckbj29rf0001bcsvf8jq77we7/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="SpringMVC（6）"><a href="#SpringMVC（6）" class="headerlink" title="SpringMVC（6）"></a>SpringMVC（6）</h1><h2 id="SpringMVC的拦截器"><a href="#SpringMVC的拦截器" class="headerlink" title="SpringMVC的拦截器"></a>SpringMVC的拦截器</h2><h4 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h4><p>==结合流程图和后台打印结果看==<br><img src="https://img-blog.csdnimg.cn/20200611204444926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbW9uMzYy,size_16,color_FFFFFF,t_70" alt="含有两个自定义拦截器的流程"><br>后台打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">preHandle执行了。。。1111</span><br><span class="line">preHandle执行了。。。2222</span><br><span class="line">testInterceptor执行了...</span><br><span class="line">postHandle执行了。。。2222</span><br><span class="line">postHandle执行了。。。1111</span><br><span class="line">success.jsp执行了...</span><br><span class="line">afterCompletion执行了。。。2222</span><br><span class="line">afterCompletion执行了。。。1111</span><br></pre></td></tr></table></figure>
<h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><p>（1）编写拦截器类，实现HandlerInterceptor接口<br>（2）配置拦截器</p>
<p><code>HandlerInterceptor</code>接口的重写方法：<br>（1）<code>preHandle</code>：预处理，在controller方法执行前</p>
<pre><code>return true：放行，执行下一个拦截器，如果没有，执行controller中的方法
return false：不放行，直接跳转页面</code></pre><p>（2）<code>postHandle</code>：后处理，在controller方法执行后，success.jsp执行之前</p>
<p>（3）<code>afterCompletion</code>：在success.jsp页面执行后</p>
<p>流程<br><img src="https://img-blog.csdnimg.cn/20200611204738440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbW9uMzYy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="具体代码："><a href="#具体代码：" class="headerlink" title="具体代码："></a>具体代码：</h4><p><code>index.jsp</code>首页：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="user/testInterceptor" &gt;拦截器&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><code>success.jsp</code>成功页面：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;执行成功&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">   &lt;% System.out.println(<span class="string">"success.jsp执行了..."</span>); %&gt;</span><br></pre></td></tr></table></figure>
<p><code>error.jsp</code>错误页面：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;错误页面&lt;/h3&gt;</span><br></pre></td></tr></table></figure>

<p><code>MyInterceptor1.java</code>：拦截器类，实现HandlerInterceptor接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预处理，在controller方法执行前</span></span><br><span class="line"><span class="comment">     *  return true：放行，执行下一个拦截器，如果没有，执行controller中的方法</span></span><br><span class="line"><span class="comment">     *  return false：不放行，直接跳转页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"preHandle执行了。。。1111"</span>);</span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跳转到页面</span></span><br><span class="line"><span class="comment">//        request.getRequestDispatcher("/WEB-INF/pages/error.jsp").forward(request, response);</span></span><br><span class="line"><span class="comment">//        // 不放行</span></span><br><span class="line"><span class="comment">//        return false;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后处理，在controller方法执行后，success.jsp执行之前</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"postHandle执行了。。。1111"</span>);</span><br><span class="line">        <span class="comment">// 指定页面跳转，就不会跳到success.jsp了</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/WEB-INF/pages/error.jsp"</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在success.jsp页面执行后</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterCompletion执行了。。。1111"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>springmvc.xml</code>：配置拦截器，将自定义拦截器类<code>MyInterceptor1</code>注入到容器中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 要拦截的具体的方法</span></span><br><span class="line"><span class="comment">                一般只需要写一个（拦截或者不拦截）</span></span><br><span class="line"><span class="comment">                /user/*：请求路径中user下的所有controller方法</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/*"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不要拦截的具体的方法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;mvc:exclude-mapping path=""/&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置拦截器对象 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.Lemon.interceptor.MyInterceptor1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>UserController</code>控制器类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpringMVC的拦截器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testInterceptor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testInterceptor执行了..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>==注意==：<br>（1）在配置拦截器时，<code>&lt;mvc:mapping path=&quot;/user/*&quot;/&gt;</code>表示请求路径中user下的所有controller方法<br>（2）在<code>preHandle</code>预处理方法中，可以<code>reutrn false</code>不放行，并跳转至指定的<code>error.jsp</code>错误页面<br>（3）在<code>postHandle</code>后处理方法中，也可以跳转至指定的<code>error.jsp</code>错误页面<br>（4）如果都不指定，那么就跳转至<code>success.jsp</code>成功页面</p>
<p>==效果==：<br>（1）不指定跳转，都<code>return true</code>放行：<br>    - 页面会跳转至<code>success.jsp</code>成功页面<br>    - 后台会打印</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">preHandle执行了。。。1111</span><br><span class="line">testInterceptor执行了...</span><br><span class="line">postHandle执行了。。。1111</span><br><span class="line">success.jsp执行了...</span><br><span class="line">afterCompletion执行了。。。1111</span><br></pre></td></tr></table></figure>
<p>（2）<code>return false</code>不放行，并指定跳转到<code>error.jsp</code>错误页面：<br>    - 页面会跳转至<code>error.jsp</code>成功页面<br>    - 如果是<code>preHandle</code>先指定了跳转并<code>return false</code>，那么后台只打印```<br>        preHandle执行了。。。1111<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 如果是&#96;postHandle&#96;指定了跳转，而&#96;preHandle&#96;是&#96;return true&#96;，那么控制器方法也会执行，后台打印</span><br></pre></td></tr></table></figure><br>    preHandle执行了。。。1111<br>    testInterceptor执行了…<br>    postHandle执行了。。。1111<br>    success.jsp执行了…<br>    afterCompletion执行了。。。1111</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 配置多个拦截器：</span><br><span class="line">&#96;MyInterceptor2&#96;自定义拦截器类：和&#96;MyInterceptor1&#96;相同</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public class MyInterceptor2 implements HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;preHandle执行了。。。2222&quot;);</span><br><span class="line">        &#x2F;&#x2F; 放行</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;postHandle执行了。。。2222&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;afterCompletion执行了。。。2222&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>springmvc.xml</code>：配置拦截器，将自定义拦截器类<code>MyInterceptor1</code>和<code>MyInterceptor2</code>注入到容器中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"> 	<span class="comment">&lt;!-- 配置第一个拦截器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.Lemon.interceptor.MyInterceptor1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置第二个拦截器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/user/*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.Lemon.interceptor.MyInterceptor2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最终后台打印：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">preHandle执行了。。。1111</span><br><span class="line">preHandle执行了。。。2222</span><br><span class="line">testInterceptor执行了...</span><br><span class="line">postHandle执行了。。。2222</span><br><span class="line">postHandle执行了。。。1111</span><br><span class="line">success.jsp执行了...</span><br><span class="line">afterCompletion执行了。。。2222</span><br><span class="line">afterCompletion执行了。。。1111</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC（7）</title>
    <url>/2020/ckbj29rf1001dcsvf7h6097zt/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="SpringMVC（7）"><a href="#SpringMVC（7）" class="headerlink" title="SpringMVC（7）"></a>SpringMVC（7）</h1><h2 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h2><h4 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h4><p><img src="https://img-blog.csdnimg.cn/20200611205002553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlbW9uMzYy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="思路：XML-注解的方式"><a href="#思路：XML-注解的方式" class="headerlink" title="思路：XML+注解的方式"></a>思路：XML+注解的方式</h4><p>（1）先搭建整合的环境<br>（2）将Spring配置搭建完成（业务层Service）<br>（3）搭建SpringMVC配置，并使用Spring整合SpringMVC（表现层Web Conreoller）<br>（4）搭建MyBatis配置，并使用Spring整合MyBatis（持久层Dao）</p>
<h4 id="具体代码："><a href="#具体代码：" class="headerlink" title="具体代码："></a>具体代码：</h4><hr>
<h5 id="1-创建数据库："><a href="#1-创建数据库：" class="headerlink" title="1. 创建数据库："></a>1. 创建数据库：</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> ssm;</span><br><span class="line"><span class="keyword">use</span> ssm;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">account</span>(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">	<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">	money <span class="keyword">double</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<hr>
<h5 id="2-创建JavaBean实体类："><a href="#2-创建JavaBean实体类：" class="headerlink" title="2. 创建JavaBean实体类："></a>2. 创建JavaBean实体类：</h5><p><code>src/main/java/com/Lemon/domain/Account.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Double money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h5 id="3-Service业务层的Spring框架："><a href="#3-Service业务层的Spring框架：" class="headerlink" title="3. Service业务层的Spring框架："></a>3. Service业务层的Spring框架：</h5><p>（1）Service接口：<br><code>src/main/java/com/Lemon/service/AccountService.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有账户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存账户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）Service接口实现类：<br><code>src/main/java/com/Lemon/service/Impl/AccountServiceImpl.java</code> </p>
<p>使用<code>@Service</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层：查询所有账户。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层：保存账户。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）Spring配置文件：<br><code>src/main/resources/applicationContext.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.Lemon"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置哪些注解不扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>==注意==：这里希望只处理<code>service</code>和<code>dao</code>，而<code>controller</code>不需要Spring框架去处理注解扫描</p>
<p>（4）测试Spring：<br><code>com/Lemon/test/TestSpring.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 加载Spring配置文件</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据注解的id，获得对象</span></span><br><span class="line">        AccountService as = (AccountService) ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载方法</span></span><br><span class="line">        as.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>==效果==：通过注解<code>@Service(&quot;accountService&quot;)</code>调用<code>AccountServiceImpl</code>类的<code>findAll</code>方法，控制台<code>打印业务层：查询所有账户。。。</code></p>
<hr>
<h5 id="4-配置SpringMVC"><a href="#4-配置SpringMVC" class="headerlink" title="4. 配置SpringMVC"></a>4. 配置SpringMVC</h5><p>（1）配置SpringMVC的前端控制器和过滤器：<br><code>webapp/WEB-INF/web.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 解决中文乱码的过滤器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 配置前端控制器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载springmvc.xml文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动服务器，创建该servlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）SpringMVC配置文件：<br><code>src/main/resources/springmvc.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.Lemon"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 过滤静态资源 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/css/"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/images/"</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 开启SpringMVC注解的支持 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>==注意==：SpringMVC的注解扫描，只扫描<code>controller</code>注解</p>
<p>（3）SpringMVC的controller方法和页面：<br><code>src/main/java/com/Lemon/controller/AccountController.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"表现层：查询所有账户。。。"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>src/main/webapp/index.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="account/findAll"&gt;测试查询&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p><code>src/main/webapp/WEB-INF/pages/list.jsp</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;查询所有的账户&lt;/h3&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>（4）测试SpringMVC：</p>
<p>开启Tomcat服务器，首页点击<code>测试查询</code>的超链接，可以跳转到<code>list.jsp</code>显示<code>查询所有的账户</code>，控制台打印<code>表现层：查询所有账户。。。</code></p>
<h5 id="5-Spring整合SpringMVC"><a href="#5-Spring整合SpringMVC" class="headerlink" title="5. Spring整合SpringMVC"></a>5. Spring整合SpringMVC</h5><p><strong>目的</strong>：在<code>Controller</code>中能够调用<code>Service</code>对象中的方法</p>
<p><strong>思路</strong>：</p>
<ul>
<li>Controller –&gt; Service –&gt; Dao –&gt; 数据库，可以在容器中调用service对象</li>
<li>但是现在在服务器启动时，只有<code>springmvc.xml</code>被应用了，<code>controller</code>可以被注入到容器中</li>
<li>而Spring配置文件<code>applicationContext.xml</code>没有被注入到容器中，扫描不到<code>service</code>和<code>dao</code>注解</li>
<li>所以需要先将<code>service</code>和<code>dao</code>注入到容器中，才能在<code>controller</code>方法中调用<code>service</code>的方法</li>
</ul>
<p><strong>解决办法</strong>：</p>
<ul>
<li>在<code>web.xml</code>文件中配置<code>ContextLoaderListener</code>监听器，该监听器会在服务器启动时加载Spring配置文件</li>
</ul>
<p>==注意==：</p>
<p><code>ContextLoaderListener</code>监听器默认只加载<code>WEB-INF</code>目录下的<code>applicationContext.xml</code>配置文件，所以需要加上参数context-param来设置配置文件的路径，指向<code>classpath:applicationContext.xml</code></p>
<p><strong>具体代码</strong>：</p>
<p>（1）在<code>web.xml</code>中配置监听器：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!-- 设置配置文件的路径 --&gt;</span><br><span class="line">&lt;context-param&gt;</span><br><span class="line">  &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">  &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置Spring的监听器 --&gt;</span><br><span class="line">&lt;listener&gt;</span><br><span class="line">  &lt;listener-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderListener</span>&lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）在<code>AccountController</code>中注入<code>AccountService</code>对象（依赖注入），并调用<code>AccountService</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依赖注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"表现层：查询所有账户。。。"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用service的方法</span></span><br><span class="line">        List&lt;Account&gt; list = accountService.findAll();</span><br><span class="line">        model.addAttribute(<span class="string">"list"</span>, list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>==注意==：这里使用<code>Model</code>将得到的结果存储在<code>request域对象</code>中</p>
<p>（3）测试：</p>
<p>开启Tomcat服务器，首页点击<code>测试查询</code>的超链接，可以跳转到<code>list.jsp</code>显示<code>查询所有的账户</code>，控制台打印<code>表现层：查询所有账户。。。</code>和<code>业务层：查询所有账户。。。</code></p>
<h5 id="6-配置MyBatis"><a href="#6-配置MyBatis" class="headerlink" title="6. 配置MyBatis"></a>6. 配置MyBatis</h5><p>（1）MyBatis的配置文件：（不需要，只是在测试时使用，后续在Spring配置文件中配置并注入容器了）</p>
<p><code>src/main/resources/SqlMapConfig.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置环境 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///ssm?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 引入映射配置文件，可以直接引入接口 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 直接引入dao中所有的接口 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.Lemon.dao"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）创建<code>AccountDao</code>接口，并使用注解编写Sql语句：不需要自己写接口实现类，因为MyBatis会自动生成实现类</p>
<p><code>src/main/java/com/Lemon/dao/AccountDao.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 配置MyBatis框架，使用注解的方式</span></span><br><span class="line">    <span class="comment">// 查询所有账户</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from account"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存账户信息</span></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into account (name,money) values (#&#123;name&#125;,#&#123;money&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）测试：需要在数据表中添加数据</p>
<p><code>src/main/java/com/Lemon/test/TestMyBatis.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMyBatis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 加载MyBatis配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建SqlSessionFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取到代理对象</span></span><br><span class="line">        AccountDao dao = session.getMapper(AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用dao方法</span></span><br><span class="line">        List&lt;Account&gt; list = dao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Account account : list) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试保存</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">"熊大"</span>);</span><br><span class="line">        account.setMoney(<span class="number">400</span>d);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载MyBatis配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建SqlSessionFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取到代理对象</span></span><br><span class="line">        AccountDao dao = session.getMapper(AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用dao方法</span></span><br><span class="line">        dao.saveAccount(account);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="7-Spring整合MyBatis"><a href="#7-Spring整合MyBatis" class="headerlink" title="7. Spring整合MyBatis"></a>7. Spring整合MyBatis</h5><p><strong>目的</strong>：service要能调用dao对象，必须将dao也要放入到容器中</p>
<p><strong>思路</strong>：把<code>SqlMapConfig.xml</code>配置文件配置到<code>applicationContext.xml</code>中</p>
<p><strong>解决办法</strong>：在Spring配置文件applicationContext.xml中配置（和SqlMapConfig.xml思路是一样的）</p>
<ul>
<li>连接池</li>
<li>SqlSessionFactory工厂：工厂可以创建Session，Session可以拿到代理对象，代理对象就可以存入到IOC容器中</li>
<li>AccountDao所在的包：指定Dao接口所在路径</li>
</ul>
<p><strong>具体代码</strong>：</p>
<p>（1）在<code>applicationContext.xml</code>中配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring整合MyBatis框架 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 配置连接池 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///ssm?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置SqlSessionFactory工厂 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置AccountDao所在的包 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mapperScannerConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.Lemon.dao"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）<code>AccountServiceImpl</code>注入<code>AccountDao</code>对象，并调用方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层：查询所有账户。。。"</span>);</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"业务层：保存账户。。。"</span>);</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>==注意==：在<code>AccountDao</code>接口上加上<code>@Repository</code>注解</p>
<p>（3）在<code>applicationContext.xml</code>中配置Spring框架声明式事务管理，用于保存数据：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置AOP增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切入点表达式：Impl下的以ServiceImpl结尾的类中的所有的方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.Lemon.service.Impl.*ServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（4）一些补充：</p>
<p><code>list.jsp</code>：遍历结果并打印</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;查询所有的账户&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"account"</span>&gt;</span><br><span class="line">        $&#123;account.name&#125;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><code>index.jsp</code>：表单</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href="account/findAll"&gt;测试查询&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;测试保存&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action=<span class="string">"account/save"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        金额：&lt;input type=<span class="string">"text"</span> name=<span class="string">"money"</span>/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"保存"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>（5）测试页面保存：<code>AccountController</code>类中加入<code>save</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        accountService.saveAccount(account);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重定向</span></span><br><span class="line">        response.sendRedirect(request.getContextPath()+<span class="string">"/account/findAll"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        return;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h5 id="8-整体测试"><a href="#8-整体测试" class="headerlink" title="8. 整体测试"></a>8. 整体测试</h5><p>（1）查询：</p>
<ul>
<li>启动服务器，页面点击<code>测试查询</code>的超链接</li>
<li>页面显示数据库中的数据</li>
<li>控制台打印<code>表现层：查询所有账户。。。</code>和<code>业务层：查询所有账户。。。</code></li>
</ul>
<p>（2）保存：</p>
<ul>
<li><p>启动服务器，在页面表单输入姓名和金额并保存</p>
</li>
<li><p>页面显示数据库中的数据和刚输入的数据</p>
</li>
<li><p>控制台打印<code>业务层：保存账户。。。</code>，<code>表现层：查询所有账户。。。</code>和<code>业务层：查询所有账户。。。</code></p>
<h5 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a>9. 总结</h5><p>  （1）启动服务器，点击超链接，请求到Controller<br>  Controller类中注入了Service，可以调用service方法<br>  findAll方法执行后可以存储结果，并跳转到list.jsp页面</p>
<p>  （2）Service类中注入了Dao，可以调用Dao方法<br>  Dao方法会使用sql语句真正查询数据库，并将结果返回</p>
<p>  （3）controller中接收到返回值后，可以用Model保存结果<br>  在list页面中可以遍历得到结果，输出到页面上</p>
</li>
</ul>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/ckbj29rf3001hcsvf4st3aurg/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>我的第一篇博客文章</title>
    <url>/2020/ckbj29rf5001jcsvf6z9mb3rz/</url>
    <content><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h3><ol>
<li>hexo s：开启博客</li>
<li>hexo clean：清理</li>
<li>hexo g：生成</li>
<li>hexo d：推到Github</li>
</ol>
<hr>
]]></content>
  </entry>
</search>
